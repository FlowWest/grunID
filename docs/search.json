[{"path":"https://github.com/FlowWest/grunID/articles/azure-authentication.html","id":"confirm-account-on-azure","dir":"Articles","previous_headings":"","what":"Confirm Account on Azure","title":"Authentication with Azure AD","text":"first step process confirm account successfully linked Azure. , navigate Microsoft Azure Portal log existing credentials create new account. logged , click account shown .  Next, click Switch Directory  confirm directory California Department Water Resources. already switched directory now. see directory contact Emanuel Rodriguez erodriguez@flowwest.com help.","code":""},{"path":"https://github.com/FlowWest/grunID/articles/azure-authentication.html","id":"install-dependencies","dir":"Articles","previous_headings":"","what":"Install Dependencies","title":"Authentication with Azure AD","text":"addition installing R package, need install Azure Command Line Interface (CLI) authenticate Azure Directory. Azure CLI allows us link local R session Azure AD account authenticate user read/write permissions database using “token”. overview tool can found https://learn.microsoft.com/en-us/cli/azure/. download install tool, visit Install Azure CLI Windows page, Mac OS visit Install Mac OS page.","code":""},{"path":"https://github.com/FlowWest/grunID/articles/azure-authentication.html","id":"authentication-with-the-az-tool","dir":"Articles","previous_headings":"","what":"Authentication with the AZ tool","title":"Authentication with Azure AD","text":"next step requires opening command prompt. Windows, can done searching “command prompt” Start menu, right-clicking Start button selecting “Windows PowerShell” “Windows Command prompt” pop-menu. Mac, use “Terminal” application. Windows Command Prompt shown .  Next, ’ll want log Azure command line. , simply enter following command prompt. pressing enter, internet browser open can log Azure account. already logged previous step, simply allow select account use.","code":"az login"},{"path":"https://github.com/FlowWest/grunID/articles/azure-authentication.html","id":"create-connection","dir":"Articles","previous_headings":"","what":"Create Connection","title":"Authentication with Azure AD","text":"grunID package comes function gr_db_connect create authentication token pass password appropriate DBI::dbConnect function. need provide point either config.yml file username host gr_db_connect function. example shown .","code":""},{"path":"https://github.com/FlowWest/grunID/articles/azure-authentication.html","id":"authentication-with-a-config-file","dir":"Articles","previous_headings":"Create Connection","what":"Authentication with a Config file","title":"Authentication with Azure AD","text":"easiest safest way manage connection database using config.yml file. grunID package uses config R package parse contents file populate appropriate connection string. format config file shown . Note: name file must config.yml within working directory. using source control please sure add config.yml ignores file. characters <> (including <>) replaced values provided database administrator. Note: password left file, filled using az tool installed previous step. empty line required end config.yml file file place, create connection database following:","code":"default:   dbname: <db-name will be provided>   username: <your-username will be provided>   port: 5432   host: <db-host will be provided> con <- grunID::gr_db_connect() # a config file will be searched for starting at the working directory.  dplyr::tbl(con, \"agency\")"},{"path":"https://github.com/FlowWest/grunID/articles/azure-authentication.html","id":"authentication-with-username-dbname-and-host","dir":"Articles","previous_headings":"Create Connection","what":"Authentication with username, dbname and host","title":"Authentication with Azure AD","text":"gr_db_connect function can also called arguments specifying username, database name host server database. Note quick way create connection database using source control also easy way accidentally share credentials. reason, recommend setting config file adding ignores file.","code":"con <- grunID::gr_db_connect(   username = \"myusername\",    dbname = \"dbname\",    host = \"host.com\" )  dplyr::tbl(con, \"agency\") id code    agency_name active created_at          creat…¹ updated_at          updat…²   <int> <chr>   <chr>       <lgl>  <dttm>              <chr>   <dttm>              <chr>   1     1 DWR     Department… TRUE   2023-01-12 01:54:44 runida… 2023-01-12 01:54:44 runida… 2     2 CDFW    California… TRUE   2023-01-12 01:54:44 runida… 2023-01-12 01:54:44 runida… 3     3 USFWS   United Sta… TRUE   2023-01-12 01:54:44 runida… 2023-01-12 01:54:44 runida… 4     4 UCDAVIS University… TRUE   2023-01-12 01:54:44 runida… 2023-01-12 01:54:44 runida… # … with abbreviated variable names created_by, updated_by"},{"path":"https://github.com/FlowWest/grunID/articles/grunid-app.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"GrunID Shiny App","text":"Starting version 0.5 grunID, R Shiny app included package. launch app, simply call function grunID::run_app(). Like grunID::gr_db_connect(), app search configuration file obtain necessary parameters connecting database. guide, explore various features app provide instructions use . Note: app currently development, changes may made. result, documentation may always --date. Please report bugs erodriguez@flowwest.com.","code":""},{"path":"https://github.com/FlowWest/grunID/articles/grunid-app.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"GrunID Shiny App","text":"launch app, run grunID::run_app(). can optionally pass path config file, default, app search config file within working directory.  options available element form latest data database. Additionally, form value corresponding ‘Information’ window either lists available options detail provides detailed explanation input.","code":"grunID::run_app()"},{"path":"https://github.com/FlowWest/grunID/articles/in_season_seeds.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Adding In-season seeds","text":"ideal setting, sample seeds added database inserting Sherlock output, things don’t always go planned. article, discuss process creating additional samples location.","code":""},{"path":"https://github.com/FlowWest/grunID/articles/in_season_seeds.html","id":"sample-plan","dir":"Articles","previous_headings":"","what":"Sample Plan","title":"Adding In-season seeds","text":"first step create “Sample Plan”. Sample Plan simply dataframe necessary data create samples. required information includes: Required: Location Code (location_code) - location samples. Use grunID::get_sample_locations(con) retrieve list values exist database. Required: Sample Event Number (sample_event_number) - sample event number associated samples. Required: First Sample Date (first_sample_date) - first sample date event. Required: Sample Bin Code (sample_bin_code) - Sample bin codes samples. Note bin code must row. Fork Length Range (min_fork_length max_fork_length) - fork length given bin code. Expected Number Samples (expected_number_of_samples) - expected number samples. good information unsure feel free pick large number like 50 75. spreadsheet template available Templates Page. can read using R following code: dataframe look like , data place examples:","code":"in_season_seeds <- readxl::read_excel(\"/path/to/in-season-seeds.xlsx\")"},{"path":"https://github.com/FlowWest/grunID/articles/in_season_seeds.html","id":"insert-into-database","dir":"Articles","previous_headings":"","what":"Insert into Database","title":"Adding In-season seeds","text":"inserting data database, must first ensure data types correct column. Next, simply call grunID::add_sample_plan function insert additional plan values database. function, hood, add sample events, sample bins, samples extracted file.","code":"in_season_seeds |>    dplyr::mutate(     sample_event_number = as.integer(sample_event_number),     min_fork_length = as.integer(min_fork_length),     max_fork_length = as.integer(max_fork_length)   ) con <- grunID::gr_db_connect() grunID::add_sample_plan(con, in_season_seeds, verbose = TRUE) # verbose = TRUE will give some progress bars"},{"path":"https://github.com/FlowWest/grunID/articles/process_and_add_assay_results.html","id":"objective","dir":"Articles","previous_headings":"","what":"Objective","title":"Process and Add Assay Results to Database","text":"tutorial describes : connect genetics run identification database credentials write plate run metadata database prepare Synergy H1 result data upload database upload assay result data database generate threshold values plate run update assay detections plate run database","code":""},{"path":"https://github.com/FlowWest/grunID/articles/process_and_add_assay_results.html","id":"dependencies","dir":"Articles","previous_headings":"","what":"Dependencies","title":"Process and Add Assay Results to Database","text":"following packages required:","code":"library(grunID) library(config) library(DBI) library(RPostgres)"},{"path":"https://github.com/FlowWest/grunID/articles/process_and_add_assay_results.html","id":"database-credentials","dir":"Articles","previous_headings":"","what":"Database Credentials","title":"Process and Add Assay Results to Database","text":"improved security, recommend managing database credential information environment variables. Information set config.yml file pull information file establish connection database can found article vignette(\"azure-authentication\") Authentication Config file.","code":""},{"path":"https://github.com/FlowWest/grunID/articles/process_and_add_assay_results.html","id":"create-database-connection","dir":"Articles","previous_headings":"","what":"Create Database Connection","title":"Process and Add Assay Results to Database","text":"create connection object, run gr_db_connect: can also call gr_db_connect arguments specifying username, database name host server database. Note quick way create connection database using source control also easy way accidentally share credentials. information , see code, please see article vignette(\"azure-authentication\") Authentication username, dbname host. Every time use function read write database, pass connection object function.","code":"con <- gr_db_connect() # a config file will be searched for starting at the working directory.  dplyr::tbl(con, \"agency\")"},{"path":"https://github.com/FlowWest/grunID/articles/process_and_add_assay_results.html","id":"add-results-to-database","dir":"Articles","previous_headings":"","what":"Add Results to Database","title":"Process and Add Assay Results to Database","text":"version 0.5, grunID includes function called add_new_plate_results, allows pass arguments uploading data database. method offers convenient faster way adding data, abstracts away details may useful inspect visually. recommend starting function, likely work well. However, case errors, may need switch longer, verbose method uploading. guide, walk scenarios help understand methods uploading data.","code":""},{"path":"https://github.com/FlowWest/grunID/articles/process_and_add_assay_results.html","id":"single-function-call-with-add_new_plate_results","dir":"Articles","previous_headings":"Add Results to Database","what":"Single Function Call with add_new_plate_results","title":"Process and Add Assay Results to Database","text":"add_new_plate_results offers convenient way quickly add data database. However, requires necessary information ready pass arguments function. Additionally, return data manipulation since essentially performs multiple steps . following data required: protocol_name: name plate run uploading data . laboratory: code lab associated plate run data. genetic_method: genetic method code plate run uploading data . lab_work_performed_by: person performed lab work. description: description associate plate run. date_run: date plate run Sherlock machine. filepath: filepath spreadsheet containing results plate map layout. sample_type: sample type. layout_type: layout type plate map. plate_size: size plate layout. can call add_new_plate_results follows: successful run function return messages like : add_new_plate_results also provides helpful messages something goes wrong. example, plate run parameters already exists, prompts verify want insert anyway: duplicate error database: Coming Soon R Shiny UI add_new_plate_results function currently making, avaialable soon. Check back docs information use new version released.","code":"add_new_plate_results(con, protocol_name = \"new protocol\", genetic_method = \"SHLK\",                       laboratory = \"DWR_GeM\", lab_work_performed_by = \"user\",                        description = \"a test run\", date_run = \"2023-07-12\",                       filepath = \"../misc/sherlock_results_part_1.xlsx\",                       sample_type = \"mucus\",                       layout_type = \"split_plate_early_late\",                       plate_size = 384) ℹ Adding plate run to database ✔ Plate run added to database with id = 65 ℹ Processing sherlock data ✔ Sherlock results processing complete ℹ adding results to database ✔ Added 14883 results to the database ℹ Generating thresholds for plate run ✔ Threshold done inserting threshold result into database ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% |  ETA:  0s identified 0 samples needing OTS16 spring/winter updating status codes for uploaded samples ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% |  ETA:  0s       Assay records added Samples assigned run type                        359                         0 ℹ Adding plate run to database Plate run with these values exists in database, do you wish to insert anyway?  1: Yes 2: No  Selection: ✔ Plate run added to database with id = 66 ℹ Processing sherlock data ✔ Sherlock results processing complete ℹ adding results to database ✖ there was an error attempting to add new raw data, removing plate run associated with this from database, see the error below for more details: Error in add_raw_assay_results(con, sherlock_results_event) : the combination of: sample_id: 'F1722_3_A_1', assay_id: '1' already exists, to overwrite please delete previous assay run"},{"path":"https://github.com/FlowWest/grunID/articles/process_and_add_assay_results.html","id":"muli-step-approach","dir":"Articles","previous_headings":"Add Results to Database","what":"Muli-step Approach","title":"Process and Add Assay Results to Database","text":"multi-step approach can used cases want step visual inspection data. result broken steps.","code":""},{"path":"https://github.com/FlowWest/grunID/articles/process_and_add_assay_results.html","id":"step-1-add-plate-run-metadata","dir":"Articles","previous_headings":"Add Results to Database > Muli-step Approach","what":"Step 1: Add Plate Run Metadata","title":"Process and Add Assay Results to Database","text":"plate run Synergy H1 reader, want relate critical plate run metadata assay results particular run database. call add_plate_run providing protocol ID, method ID, laboratory ID, person ran plate. function returns unique plate run ID associated assay result records. assay results reference plate run ID, must add plate run database adding assay result data. know ID protocol used, can review existing protocols stored database following code: Select appropriate protocol ID code: Similarly, can call get_genetic_method get_laboratory_id review IDs associated methods laboratories within database. Note: save output add_plate_run. contains unique plate run identifier needed pass later functions","code":"all_protocols <- grunID::get_protocols(con) protocol_id <- all_protocols |>   dplyr::filter(id == 1) |>   dplyr::pull(id) genetic_method_id <- grunID::get_genetic_methods(con) |>   dplyr::filter(method_name == \"SHERLOCK\") |>   dplyr::pull(id) # SHERLOCK  laboratory_id <- grunID::get_laboratories(con) |>   dplyr::filter(stringr::str_detect(code, \"DWR\")) |> dplyr::pull(id) # DWR GeM  # store output of add_plate_run - contains unique plate run ID needed for later functions plate_run <- grunID::add_plate_run(con, protocol_id, genetic_method_id,                                       laboratory_id, lab_work_performed_by = \"Yogi Bear\",                                       description = \"Plate run for sampling event X\",                                       date_run = \"07-04-1776\")"},{"path":"https://github.com/FlowWest/grunID/articles/process_and_add_assay_results.html","id":"step-2-prepare-sample-details-and-sherlock-output","dir":"Articles","previous_headings":"Add Results to Database > Muli-step Approach","what":"Step 2: Prepare Sample Details and Sherlock Output","title":"Process and Add Assay Results to Database","text":"SHERLOCK results file must formatted appropriate Excel sheet format. can view example . add results database, must “plate_run” associated upload. example, use plate run created previous step. can query existing plate run using get_plate_run function. extract transpose assay result data Synergy H1 reader output, provide process_sherlock function filepath result data excel workbook, sample details dataframe described , plate size run (either 96 384). function return list containing raw final assay results. Note: save output process_sherlock. contains data needed pass add_raw_assay_results.","code":"results <- grunID::process_sherlock(filepath = \"templates/sherlock_results_template.xlsx\",                                     sample_type = \"mucus\",                                     layout_type = \"split_plate_early_late\",                                     plate_run_id = plate_run                                     plate_size = 384)"},{"path":"https://github.com/FlowWest/grunID/articles/process_and_add_assay_results.html","id":"step-4-upload-assay-results","dir":"Articles","previous_headings":"Add Results to Database > Muli-step Approach","what":"Step 4: Upload Assay Results","title":"Process and Add Assay Results to Database","text":"Provide add_raw_assay_results valid connection database processed assay result data. function returns number records added. Note: need save output add_raw_assay_results.","code":"grunID::add_raw_assay_results(con, results)"},{"path":"https://github.com/FlowWest/grunID/articles/process_and_add_assay_results.html","id":"step-5-generate-threshold-values","dir":"Articles","previous_headings":"Add Results to Database > Muli-step Approach","what":"Step 5: Generate Threshold Values","title":"Process and Add Assay Results to Database","text":"Provide generate_threshold valid connection database plate run id. function calculates raw fluorescence threshold values assay plate run. Currently, calculated two times mean value last time step control blank wells. function returns table containing thresholds sampling event needs passed update_assay_detections assign detections assays. Note: save output generate_threshold. contains threshold values needs passed update_assay_detection","code":"thresholds <- grunID::generate_threshold(con, plate_run_id)"},{"path":"https://github.com/FlowWest/grunID/articles/process_and_add_assay_results.html","id":"step-6-update-assay-detections","dir":"Articles","previous_headings":"Add Results to Database > Muli-step Approach","what":"Step 6: Update Assay Detections","title":"Process and Add Assay Results to Database","text":"Provide update_assay_detection valid connection database thresholds calculated plate run using generate_threshold. function updates assay result table positive detections , appicable, genetic run type identification. Note: need save output update_assay_detection.","code":"grunID::update_assay_detection(con, thresholds_event)"},{"path":"https://github.com/FlowWest/grunID/articles/process_and_add_assay_results.html","id":"end-session","dir":"Articles","previous_headings":"Add Results to Database > Muli-step Approach","what":"End Session","title":"Process and Add Assay Results to Database","text":"finally, close open connection database:","code":"DBI::dbDisconnect(con)"},{"path":"https://github.com/FlowWest/grunID/articles/process_and_add_assay_results.html","id":"summary-of-multi-step-approach","dir":"Articles","previous_headings":"Add Results to Database > Muli-step Approach","what":"Summary of Multi-step Approach","title":"Process and Add Assay Results to Database","text":"code : connect genetics run identification database credentials write plate run metadata database prepare Synergy H1 result data upload database upload assay result data database generate threshold values plate run update assay detections plate run database","code":"con <- grunID::gr_db_connect()  # S   plate_run_id <- grunID::add_plate_run(con, protocol_id, genetic_method_id,                                       laboratory_id, lab_work_performed_by = \"Yogi Bear\",                                       description = \"Plate run for sampling event X\",                                       date_run = \"07-04-1776\")  results <- grunID::process_sherlock(filepath = \"templates/sherlock_results_template.xlsx\",                                     sample_type = \"mucus\",                                     layout_type = \"split_plate_early_late\",                                     plate_run_id = plate_run_id                                     plate_size = 384)  # no need to store output grunID::add_raw_assay_results(con, results)  thresholds <- grunID::generate_threshold(con, plate_run_id)  # no need to store output grunID::update_assay_detection(con, thresholds)  # disconnect DBI::dbDisconnect(con)"},{"path":"https://github.com/FlowWest/grunID/articles/query_sample_status.html","id":"objective","dir":"Articles","previous_headings":"","what":"Objective","title":"Querying Sample Status","text":"tutorial describes : Query database status specific sample ID (multiple sample IDs) Query database sample IDs requiring analysis","code":""},{"path":"https://github.com/FlowWest/grunID/articles/query_sample_status.html","id":"check-status-of-specific-samples","dir":"Articles","previous_headings":"","what":"Check Status of Specific Samples","title":"Querying Sample Status","text":"function get_sample_status helpful already know sample IDs want information. function takes one sample IDs connection returns following information: id (unique identifier generated sample status table) sample_id status_code_id status_code_name comment created_at created_by function defaults full_history = FALSE, showing current status sample. want full history sample, can change argument full_history = TRUE.","code":"con <- grunID::gr_db_connect()  # find the status of a specific sample \"DER23_1_C_4\" without the full history grunID::get_sample_status(con, \"DER23_1_C_4\", full_history = FALSE)  # find the status of a specific sample \"DER23_1_C_4\" WITH the full history grunID::get_sample_status(con, \"DER23_1_C_4\", full_history = TRUE)"},{"path":"https://github.com/FlowWest/grunID/articles/query_sample_status.html","id":"get-a-list-of-all-samples-needing-analysis","dir":"Articles","previous_headings":"","what":"Get a List of All Samples Needing Analysis","title":"Querying Sample Status","text":"don’t specific sample ID mind want know samples database need assays clarification, can use function get_samples_needing_action. function produces list Sample IDs organized following categories: needs_ots_16 repeat_ots_28 repeat_ots_16 potential_heterozygotes","code":"# produce a list of Sample IDs organized by the analysis required grunID::get_samples_needing_action(con)"},{"path":"https://github.com/FlowWest/grunID/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emanuel Rodriguez. Author, maintainer. Liz Stebbins. Author.","code":""},{"path":"https://github.com/FlowWest/grunID/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rodriguez E, Stebbins L (2024). grunID: Genetic Run ID. R package version 1.0.","code":"@Manual{,   title = {grunID: Genetic Run ID},   author = {Emanuel Rodriguez and Liz Stebbins},   year = {2024},   note = {R package version 1.0}, }"},{"path":[]},{"path":"https://github.com/FlowWest/grunID/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Genetic Run ID","text":"package designed support recording processing data genetic identification Chinook salmon runs. contains tools create field sheets recording data, process data, analyze machine output determining run type samples, upload results database machine-readable, easily accessible format. package requires credentials Azure database compatibility R.","code":""},{"path":"https://github.com/FlowWest/grunID/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Genetic Run ID","text":"package can installed running code block :","code":"# install.packages(\"remotes\") remotes::install_github(\"SRJPE/grunID\")"},{"path":"https://github.com/FlowWest/grunID/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Genetic Run ID","text":"grunID package requires data collected recorded Rotary Screw Traps (RSTs) template field sheets generated package. functions grunID process data input, genetic analysis output, determine genetic identification run type, ensure data machine-readable, standard format. , data can used juvenile monitoring life cycle modeling, well uploaded Azure database can accessed probabilistic length--date (PLAD) modeling. grunID package uses native pipe operator (|>) instead tidyverse pipe operator (%>%). need R version 4.1 later installed computer run package. can update latest version R . need install latest version purrr package. recommend updating dependencies, installed, prompted upon running","code":"remotes::install_github(\"FlowWest/grunID\")"},{"path":[]},{"path":"https://github.com/FlowWest/grunID/index.html","id":"api-basics","dir":"","previous_headings":"Usage","what":"API basics","title":"Genetic Run ID","text":"get_ - task retrieving data db add_ - task writing new record db update_ - task update existing record db process_ - task parsing data flat file transforming db ready formats delete_ - task removing data db","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"https://github.com/FlowWest/grunID/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/activate_plate_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Activate Plate Run — activate_plate_run","title":"Activate Plate Run — activate_plate_run","text":"activate_plate_run() activates existing plate run entry plate_run table database.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/activate_plate_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Activate Plate Run — activate_plate_run","text":"","code":"activate_plate_run(con, plate_run_id)"},{"path":"https://github.com/FlowWest/grunID/reference/activate_plate_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activate Plate Run — activate_plate_run","text":"con valid connection database plate_run_id plate run identifier","code":""},{"path":"https://github.com/FlowWest/grunID/reference/activate_plate_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Activate Plate Run — activate_plate_run","text":"return value","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_agency.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Agency — add_agency","title":"Add Agency — add_agency","text":"add_agency() adds new agency agency lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_agency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Agency — add_agency","text":"","code":"add_agency(con, agency)"},{"path":"https://github.com/FlowWest/grunID/reference/add_agency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Agency — add_agency","text":"con DBI connection object obtained DBI::dbConnect() agency valid agency dataframe following: code character short code agency agency_name character agency's proper name","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/add_agency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Agency — add_agency","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  new_agency <- data.frame(code = \"USFWS\",                          agency_name = \"United States Fish and Wildlife Service\") add_agency(con, new_agency) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/add_assay.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Assay — add_assay","title":"Add Assay — add_assay","text":"add_assay() adds new assay type assay lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_assay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Assay — add_assay","text":"","code":"add_assay(con, assay)"},{"path":"https://github.com/FlowWest/grunID/reference/add_assay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Assay — add_assay","text":"con DBI connection object obtained DBI::dbConnect() assay valid assay dataframe following: code character short code assay assay_name character assay's name description character Short description assay","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/add_assay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Assay — add_assay","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  new_assay <- data.frame(code = \"OTS28E1\",                         assay_name = \"Ots28_Early1\",                         description = \"Targets GREB1L region; 58 bp away from                                        OTS28L1 and targets a SNP\")  add_assay(con, new_assay) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/add_enum_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Enumerated Type Value — add_enum_value","title":"Add Enumerated Type Value — add_enum_value","text":"add_enum_value() appends value existing enum","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_enum_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Enumerated Type Value — add_enum_value","text":"","code":"add_enum_value(   con,   enum = c(\"bin_code_enum\", \"survey_type_enum\", \"life_stage_enum\", \"origin_enum\",     \"run_mode_enum\", \"optics_enum\", \"light_source_enum\", \"lamp_energy_enum\",     \"well_location_enum\"),   enum_value )"},{"path":"https://github.com/FlowWest/grunID/reference/add_enum_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Enumerated Type Value — add_enum_value","text":"con DBI connection object obtained DBI::dbConnect() enum Provide one following: \"bin_code_enum\" Used generating sampling protocols sample IDs \"survey_type_enum\" Used describing survey types permits \"life_stage_enum\" Used specifying chinook life stage permits \"origin_enum\" Used specifying chinook origin permits \"run_mode_enum\" Used describing run mode Synergy H1 protocol \"optics_enum\" Used describing optics setting Synergy H1 protocol \"light_source_enum\" Used describing light source Synergy H1 protocol \"lamp_energy_enum\" Used describing lamp energy setting Synergy H1 protocol \"well_location_enum\" Used mapping Synergy H1 result output sample IDs well location assay results enum_value new value added existing enum","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_enum_value.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Enumerated Type Value — add_enum_value","text":"Enumerated (enum) types data types comprise static, ordered set values. useful controlling acceptable values within column database lookup table overkill.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/add_enum_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Enumerated Type Value — add_enum_value","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  # first confirm the new value is not redundant to existing values get_enum_values(con, \"lamp_energy_enum\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found  add_enum_value(con, \"lamp_energy_enum\", \"Low\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/add_genetic_identification.html","id":null,"dir":"Reference","previous_headings":"","what":"Genetic Identification — add_genetic_identification","title":"Genetic Identification — add_genetic_identification","text":"`add_genetic_identification` assigns genetic identifier sample based assay results.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_genetic_identification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genetic Identification — add_genetic_identification","text":"","code":"add_genetic_identification(con, sample_identifiers)"},{"path":"https://github.com/FlowWest/grunID/reference/add_genetic_identification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Genetic Identification — add_genetic_identification","text":"con valid connection database sample_identifiers identifiers samples added","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_genetic_identification.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Genetic Identification — add_genetic_identification","text":"`add_genetic_identification` checks database existing assay results sample identifier, uses assign genetic identification value. genetic_run_identification table database updated genetic identification value. genetic identification values dependent assay results: 1: high value ","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_genetic_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Genetic Method — add_genetic_method","title":"Add Genetic Method — add_genetic_method","text":"add_genetic_method() adds new genetic method type genetic method lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_genetic_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Genetic Method — add_genetic_method","text":"","code":"add_genetic_method(con, genetic_method)"},{"path":"https://github.com/FlowWest/grunID/reference/add_genetic_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Genetic Method — add_genetic_method","text":"con DBI connection object obtained DBI::dbConnect() genetic_method valid genetic method dataframe following: code character 4 letter code caps method_name character Short name method description character Brief description method","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/add_genetic_method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Genetic Method — add_genetic_method","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?   new_method <- data.frame(code = \"FAKE\", method_name = \"Fake Method\",                          description = \"A fake method created for this example\") add_genetic_method(con, new_method) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/add_laboratory.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Laboratory — add_laboratory","title":"Add Laboratory — add_laboratory","text":"add_laboratory() adds new laboratory laboratory lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_laboratory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Laboratory — add_laboratory","text":"","code":"add_laboratory(con, laboratory)"},{"path":"https://github.com/FlowWest/grunID/reference/add_laboratory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Laboratory — add_laboratory","text":"con DBI connection object obtained DBI::dbConnect() laboratory valid laboratory dataframe containing following: code Short code representing laboratory name laboratory_name Laboratory full name description Brief description laboratory","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/add_laboratory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Laboratory — add_laboratory","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  new_laboratory <- data.frame(code = \"CNL\",                              laboratory_name = \"Cool New Lab\",                              description = \"The coolest new lab ever\") add_laboratory(con, new_laboratory) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/add_new_plate_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Add New Plate Results — add_new_plate_results","title":"Add New Plate Results — add_new_plate_results","text":"Add New Plate Results","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_new_plate_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add New Plate Results — add_new_plate_results","text":"","code":"add_new_plate_results(   con,   protocol_name,   genetic_method,   laboratory,   lab_work_performed_by,   description,   date_run,   filepath,   sample_type,   layout_type,   plate_size = c(96, 384),   .control_id = \"EBK\",   selection_strategy = \"recent priority\",   run_gen_id = FALSE,   samples_type = c(\"jpe\", \"salvage\"),   custom_layout_filepath = NULL )"},{"path":"https://github.com/FlowWest/grunID/reference/add_new_plate_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add New Plate Results — add_new_plate_results","text":"con connection database genetic_method genetic method used run laboratory lab used run description description ne associated plate run date_run date assat run filepath filepath Sherlock results sample_type sample type layout_type layout used assay plate_size either 96 384 protocol name pf protocol used run is_salvage samples obtained salvage program","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_plate_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Plate Run — add_plate_run","title":"Create Plate Run — add_plate_run","text":"`add_plate_run()` adds metadata plate run plate_run table database.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_plate_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Plate Run — add_plate_run","text":"","code":"add_plate_run(   con,   protocol_id,   genetic_method_id,   laboratory_id,   lab_work_performed_by,   description,   date_run )"},{"path":"https://github.com/FlowWest/grunID/reference/add_plate_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Plate Run — add_plate_run","text":"con valid connection database protocol_id protocol identifier genetic_method_id genetic method identifier laboratory_id laboratory identifier lab_work_performed_by name staff performed plate run description description plate run date_run date plate run","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_plate_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Plate Run — add_plate_run","text":"unique plate run identifier assigned database. value needs retained workflow can passed argument functions `process_well_sample_details()` `generate_threshold()`.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_plate_thresholds.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Thresholds to Database — add_plate_thresholds","title":"Add Thresholds to Database — add_plate_thresholds","text":"Add Thresholds Database","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_plate_thresholds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Thresholds to Database — add_plate_thresholds","text":"","code":"add_plate_thresholds(   con,   thresholds,   destination_table,   results_table,   .control_id = \"EBK\" )"},{"path":"https://github.com/FlowWest/grunID/reference/add_plate_thresholds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Thresholds to Database — add_plate_thresholds","text":"con connection database thresholds thresholds table use insert data, table generated generate_threshold .control_id id use control thresholds","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_plate_thresholds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Thresholds to Database — add_plate_thresholds","text":"Additional details...","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_protocol.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Protocol — add_protocol","title":"Add Protocol — add_protocol","text":"add_protocol() adds new protocol protocol lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_protocol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Protocol — add_protocol","text":"","code":"add_protocol(con, protocol)"},{"path":"https://github.com/FlowWest/grunID/reference/add_protocol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Protocol — add_protocol","text":"con DBI connection object obtained DBI::dbConnect() protocol valid protocol dataframe, reference protocol_template example","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/add_protocol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Protocol — add_protocol","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  new_protocol <- protocol_template new_protocol$software_version <- \"3.11.20\" add_protocol(con, new_protocol) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/add_protocol_based_on.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Protocol Based on Existing Protocol — add_protocol_based_on","title":"Add Protocol Based on Existing Protocol — add_protocol_based_on","text":"add_protocol_based_on() adds new protocol protocol lookup table based existing protocol. Use instead add_protocol case new protocol varies just slightly existing one.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_protocol_based_on.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Protocol Based on Existing Protocol — add_protocol_based_on","text":"","code":"add_protocol_based_on(   con,   based_on,   new_name,   commit = FALSE,   software_version = NULL,   reader_type = NULL,   reader_serial_number = NULL,   plate_type = NULL,   set_point = NULL,   preheat_before_moving = NULL,   runtime = NULL,   interval = NULL,   read_count = NULL,   run_mode = NULL,   excitation = NULL,   emissions = NULL,   optics = NULL,   gain = NULL,   light_source = NULL,   lamp_energy = NULL,   read_height = NULL )"},{"path":"https://github.com/FlowWest/grunID/reference/add_protocol_based_on.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Protocol Based on Existing Protocol — add_protocol_based_on","text":"con DBI connection object obtained DBI::dbConnect() based_on valid protocol name, protocol must exist.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/add_protocol_based_on.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Protocol Based on Existing Protocol — add_protocol_based_on","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  # update the software version add_protocol_based_on(con, based_on = \"existing protocol\", software_version = \"2\") #> Error in eval(expr, envir, enclos): object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/add_raw_assay_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Raw Results — add_raw_assay_results","title":"Add Raw Results — add_raw_assay_results","text":"Add Raw Results","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_raw_assay_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Raw Results — add_raw_assay_results","text":"","code":"add_raw_assay_results(   con,   assay_results,   destination_table = c(\"raw_assay_result\", \"externtal_raw_assay_result\") )"},{"path":"https://github.com/FlowWest/grunID/reference/add_run_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Run Type — add_run_type","title":"Add Run Type — add_run_type","text":"add_run_type() adds new run type run type lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_run_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Run Type — add_run_type","text":"","code":"add_run_type(con, run_type)"},{"path":"https://github.com/FlowWest/grunID/reference/add_run_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Run Type — add_run_type","text":"con DBI connection object obtained DBI::dbConnect() run type valid run type dataframe containing following: code Short code representing run type name run_name Run type full name description Brief description run type","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/add_run_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Run Type — add_run_type","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  new_run_type <- data.frame(code = \"SWR\",                            run_name = \"Spring Winter Run\",                            description = \"A pretend run\") add_run_type(con, new_run_type) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/add_salvage_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Seed Salvate Samples — add_salvage_samples","title":"Seed Salvate Samples — add_salvage_samples","text":"Given total number samples, fucntion creates inserts \"external_sample\" table database connected via con object.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_salvage_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seed Salvate Samples — add_salvage_samples","text":"","code":"add_salvage_samples(con, n_samples = 1000, year)"},{"path":"https://github.com/FlowWest/grunID/reference/add_salvage_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Seed Salvate Samples — add_salvage_samples","text":"con conection database n_samples total number samples create","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Add single or many samples — add_sample","title":"Add single or many samples — add_sample","text":"intended use function add samples additional samples received field activity.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add single or many samples — add_sample","text":"","code":"add_sample(   con,   location_code,   sample_event_number,   first_sample_date,   sample_bin_code,   min_fork_length,   max_fork_length,   expected_number_of_samples )"},{"path":"https://github.com/FlowWest/grunID/reference/add_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Add samples — add_samples","title":"Add samples — add_samples","text":"Add samples","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add samples — add_samples","text":"","code":"add_samples(con, sample_plan, sample_id_insert, verbose = FALSE)"},{"path":"https://github.com/FlowWest/grunID/reference/add_sample_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Create sample bins — add_sample_bins","title":"Create sample bins — add_sample_bins","text":"Create sample bins","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_sample_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create sample bins — add_sample_bins","text":"","code":"add_sample_bins(con, sample_plan, sample_event_ids)"},{"path":"https://github.com/FlowWest/grunID/reference/add_sample_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Create sample events — add_sample_events","title":"Create sample events — add_sample_events","text":"Create sample events","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_sample_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create sample events — add_sample_events","text":"","code":"add_sample_events(con, sample_plan)"},{"path":"https://github.com/FlowWest/grunID/reference/add_sample_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Sample Location — add_sample_location","title":"Add Sample Location — add_sample_location","text":"add_sample_location() adds new sample location sample location lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_sample_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Sample Location — add_sample_location","text":"","code":"add_sample_location(con, sample_location)"},{"path":"https://github.com/FlowWest/grunID/reference/add_sample_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Sample Location — add_sample_location","text":"con DBI connection object obtained DBI::dbConnect() sample_location valid sample location dataframe following: code character short code location location_name character location name stream_name character stream name (e.g., \"American River\") description character managing_agency_id integer see get_agencies latitude numeric longitude numeric","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/add_sample_location.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Sample Location — add_sample_location","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  new_sample_location <- data.frame(code = \"\",                                   location_name = \"\",                                   stream_name = \"\",                                   description = \"\",                                   managing_agency_id = 1,                                   latitude = 0,                                   longitude = 0) add_sample_location(con, new_sample_location) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/add_sample_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Sample Plan — add_sample_plan","title":"Add Sample Plan — add_sample_plan","text":"add_sample_plan registers new sampling events generates new sample ids","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_sample_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Sample Plan — add_sample_plan","text":"","code":"add_sample_plan(   con,   sample_plan,   verbose = FALSE,   sample_status_code = \"created\" )"},{"path":"https://github.com/FlowWest/grunID/reference/add_sample_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Sample Plan — add_sample_plan","text":"con DBI connection object sample_plan table containing following columns sample plan: location_code, sample_event_number, first_sample_date, sample_bin_code, min_fork_length, max_fork_length, expected_number_of_samples.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_sample_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Sample Plan — add_sample_plan","text":"named value number_of_samples_added reflecting number samples added database.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_sample_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Sample Plan — add_sample_plan","text":"","code":"# example database connection con <- gr_db_connect() #> ℹ refreshing Azure auth token #> ✔ refreshing Azure auth token ... done #>  #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? add_sample_plan(con, sample_plan) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/add_sample_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Sample Type — add_sample_type","title":"Add Sample Type — add_sample_type","text":"add_sample_type() adds new sample type sample type lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_sample_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Sample Type — add_sample_type","text":"","code":"add_sample_type(con, sample_type)"},{"path":"https://github.com/FlowWest/grunID/reference/add_sample_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Sample Type — add_sample_type","text":"con DBI connection object obtained DBI::dbConnect() sample_type valid sample type dataframe containing following: code Short code representing sample type name sample_type_name Sample type full name description Brief description sample type","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/add_sample_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Sample Type — add_sample_type","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  new_sample_type <- data.frame(code = \"SFB\",                               sample_type_name = \"Some Fish Body\",                               description = \"Took a bit of a fish\") add_sample_type(con, new_sample_type) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/add_status_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Status Code — add_status_code","title":"Add Status Code — add_status_code","text":"add_status_code() adds new status code status code lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/add_status_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Status Code — add_status_code","text":"","code":"add_status_code(con, status_code)"},{"path":"https://github.com/FlowWest/grunID/reference/add_status_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Status Code — add_status_code","text":"con DBI connection object obtained DBI::dbConnect() status_code valid status code dataframe containing following: status_code Status code full name description Brief description status code","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/add_status_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Status Code — add_status_code","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  new_status_code <- data.frame(status_code = \"All done\",                               description = \"Everything is all done\") add_status_code(con, new_status_code) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/assign_run_types.html","id":null,"dir":"Reference","previous_headings":"","what":"assign run types — assign_run_types","title":"assign run types — assign_run_types","text":"helper function called within `add_genetic_identification`","code":""},{"path":"https://github.com/FlowWest/grunID/reference/assign_run_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"assign run types — assign_run_types","text":"","code":"assign_run_types(assay_detections_with_status_codes)"},{"path":"https://github.com/FlowWest/grunID/reference/assign_run_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"assign run types — assign_run_types","text":"assay_detections table assay detections","code":""},{"path":"https://github.com/FlowWest/grunID/reference/assign_run_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"assign run types — assign_run_types","text":"table `run_type_id` column","code":""},{"path":"https://github.com/FlowWest/grunID/reference/assign_run_types.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"assign run types — assign_run_types","text":"`assign_run_types` takes assay detections assigns run type ID based assay results logic status codes.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/assign_status_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"assign status codes — assign_status_codes","title":"assign status codes — assign_status_codes","text":"helper function called within `add_genetic_identification`","code":""},{"path":"https://github.com/FlowWest/grunID/reference/assign_status_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"assign status codes — assign_status_codes","text":"","code":"assign_status_codes(assay_detections)"},{"path":"https://github.com/FlowWest/grunID/reference/assign_status_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"assign status codes — assign_status_codes","text":"assay_detections table assay detections","code":""},{"path":"https://github.com/FlowWest/grunID/reference/assign_status_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"assign status codes — assign_status_codes","text":"table `status_code_id` column updated","code":""},{"path":"https://github.com/FlowWest/grunID/reference/assign_status_codes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"assign status codes — assign_status_codes","text":"`assign_status_codes` takes assay detections assigns status code based assay results logic.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/check_in_jpe_field_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Check-in Samples from field — check_in_jpe_field_samples","title":"Check-in Samples from field — check_in_jpe_field_samples","text":"Check-Samples field","code":""},{"path":"https://github.com/FlowWest/grunID/reference/check_in_jpe_field_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check-in Samples from field — check_in_jpe_field_samples","text":"","code":"check_in_jpe_field_samples(con, filepath, season = year(today()))"},{"path":"https://github.com/FlowWest/grunID/reference/create_field_sheet.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Field Sheet — create_field_sheet","title":"Create Field Sheet — create_field_sheet","text":"create_field_sheet() called within create_season_field_sheets() appends worksheet existing excel workbook containing formatted field sheet used crew collecting genetic samples.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/create_field_sheet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Field Sheet — create_field_sheet","text":"","code":"create_field_sheet(   wb,   field_sheet_sample_plan,   sample_event_number,   first_sample_date,   sample_location,   sample_location_code,   fl_summary )"},{"path":"https://github.com/FlowWest/grunID/reference/create_field_sheet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Field Sheet — create_field_sheet","text":"wb Workbook object createWorkbook field_sheet_sample_plan dataframe containing content field sheet, use field_sheet_sample_plan output get_field_sheet_event_plan. Note get_field_sheet_event_plan also returns arguments required function. following columns must contain data: Bin sampling bin identifier -E Bin FL Range (mm) min max fork length range sampling bin Sample # number denoting order sample taken, 1 total number planned samples sampling bin Sample ID {sample_location_code}{YY}_{sample_event_number}_{sample_bin}_{sample_number} (e.g., \"BTC22_3_A_1\") remaining columns (\"Date\", \"Time\", \"FL (mm)\", \"Field Run ID\", \"Fin Clip (Y/N)\", \"Comments\") left empty filled hand field sample_event_number non-unique sampling event number, enumerated 1 start monitoring season sampling location first_sample_date date object YYYY-MM-DD representing first day sampling 2 day sampling event sample_location sampling location name (e.g., \"Battle Creek\") sample_location_code sampling location short code (e.g., \"BTC\") fl_summary summary fork length bins used sampling location min max fork lengths.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/create_field_sheet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Field Sheet — create_field_sheet","text":"Workbook object createWorkbook new worksheet","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/create_multiple_field_sheets.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Multiple Field Sheets — create_multiple_field_sheets","title":"Create Multiple Field Sheets — create_multiple_field_sheets","text":"create_multiple_field_sheets() creates excel workbook appends multiple formatted field worksheets sample event IDs given sample plan.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/create_multiple_field_sheets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Multiple Field Sheets — create_multiple_field_sheets","text":"","code":"create_multiple_field_sheets(added_sample_plan, field_sheet_filepath)"},{"path":"https://github.com/FlowWest/grunID/reference/create_multiple_field_sheets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Multiple Field Sheets — create_multiple_field_sheets","text":"added_sample_plan object created running add_sample_plan(). named list containing elements \"number_of_samples_added\" \"sample_ids_created\". \"sample_ids_created\" table must contain column \"sample_event_id\". field_sheet_filepath filepath name desired workbook containing field sheets.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/create_multiple_field_sheets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Multiple Field Sheets — create_multiple_field_sheets","text":"Workbook object createWorkbook worksheet sampling event sample plan.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/create_multiple_field_sheets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Multiple Field Sheets — create_multiple_field_sheets","text":"create_multiple_field_sheets() combines get_field_sheet_sample_plan() create_field_sheet() one function. Field sheets created unique sample event IDs given sample plan. get_field_sheet_sample_plan() create_field_sheet() can still run independently create one field sheet time.","code":""},{"path":[]},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/create_season_field_sheets.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Season Field Sheets — create_season_field_sheets","title":"Create Season Field Sheets — create_season_field_sheets","text":"create_season_field_sheets() creates excel workbook appends multiple formatted field worksheets sample event IDs given sample plan.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/create_season_field_sheets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Season Field Sheets — create_season_field_sheets","text":"","code":"create_season_field_sheets(con, season, field_sheet_filepath)"},{"path":"https://github.com/FlowWest/grunID/reference/create_season_field_sheets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Season Field Sheets — create_season_field_sheets","text":"con valid connection database season format YYYY field_sheet_filepath filepath name desired workbook containing field sheets.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/create_season_field_sheets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Season Field Sheets — create_season_field_sheets","text":"Workbook object createWorkbook worksheet sampling event sample plan.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/create_season_field_sheets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Season Field Sheets — create_season_field_sheets","text":"create_season_field_sheets() creates field sheets unique sample event IDs given season. given season, function gather sampling events year September 30th sampling events previous year October 1st.","code":""},{"path":[]},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/deactivate_plate_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Deactivate Plate Run — deactivate_plate_run","title":"Deactivate Plate Run — deactivate_plate_run","text":"deactivate_plate_run() deactivates existing plate run entry plate_run table database.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/deactivate_plate_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deactivate Plate Run — deactivate_plate_run","text":"","code":"deactivate_plate_run(con, plate_run_id, sub_plates = NULL)"},{"path":"https://github.com/FlowWest/grunID/reference/deactivate_plate_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deactivate Plate Run — deactivate_plate_run","text":"con valid connection database plate_run_id plate run identifier","code":""},{"path":"https://github.com/FlowWest/grunID/reference/deactivate_plate_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deactivate Plate Run — deactivate_plate_run","text":"return value","code":""},{"path":"https://github.com/FlowWest/grunID/reference/delete_agency.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Agency — delete_agency","title":"Delete Agency — delete_agency","text":"delete_agency() deletes existing agency agency lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/delete_agency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Agency — delete_agency","text":"","code":"delete_agency(con, agency_id)"},{"path":"https://github.com/FlowWest/grunID/reference/delete_agency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Agency — delete_agency","text":"con DBI connection object obtained DBI::dbConnect() agency_id numeric ID targeted agency get_agencies","code":""},{"path":"https://github.com/FlowWest/grunID/reference/delete_agency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete Agency — delete_agency","text":"Note: agency associated permit record, database restricts deleting agency. must first update records new agency reattempting delete agency. Consider using update_agency_status function wanting retire agency retaining value historic records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/delete_agency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete Agency — delete_agency","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_agencies <- get_agencies(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_agencies) # to view the ID of the agency needing deletion #> Error in eval(expr, envir, enclos): object 'all_agencies' not found  delete_agency(con, 4) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/delete_assay.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Assay — delete_assay","title":"Delete Assay — delete_assay","text":"delete_assay() deletes existing assay type assay lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/delete_assay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Assay — delete_assay","text":"","code":"delete_assay(con, assay_id)"},{"path":"https://github.com/FlowWest/grunID/reference/delete_assay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Assay — delete_assay","text":"con DBI connection object obtained DBI::dbConnect() assay_id numeric ID targeted assay get_assays","code":""},{"path":"https://github.com/FlowWest/grunID/reference/delete_assay.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete Assay — delete_assay","text":"Note: assay type associated assay result record, database restricts deleting assay type. must first update records new assay type reattempting delete assay type. Consider using update_assay_status function wanting retire assay type retaining value historic records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/delete_assay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete Assay — delete_assay","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_assays <- get_assays(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_assays) # to view the ID of the assay needing deletion #> Error in eval(expr, envir, enclos): object 'all_assays' not found  delete_assay(con, 1) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/delete_genetic_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Genetic Method — delete_genetic_method","title":"Delete Genetic Method — delete_genetic_method","text":"delete_genetic_method() deletes existing genetic method genetic method lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/delete_genetic_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Genetic Method — delete_genetic_method","text":"","code":"delete_genetic_method(con, genetic_method_id)"},{"path":"https://github.com/FlowWest/grunID/reference/delete_genetic_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Genetic Method — delete_genetic_method","text":"con DBI connection object obtained DBI::dbConnect() genetic_method_id numeric ID targeted genetic method get_genetic_methods Note: genetic method type associated assay result record, database restricts deleting genetic method type. must first update records new genetic method type reattempting delete genetic method type. Consider using update_genetic_method_status function wanting retire genetic method type retaining value historic records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/delete_genetic_method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete Genetic Method — delete_genetic_method","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_methods <- get_genetic_methods(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_methods) # to view the ID of the genetic method needing updates #> Error in eval(expr, envir, enclos): object 'all_methods' not found  delete_genetic_method(con, 1) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/delete_laboratory.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Laboratory — delete_laboratory","title":"Delete Laboratory — delete_laboratory","text":"delete_laboratory() deletes existing laboratory laboratory lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/delete_laboratory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Laboratory — delete_laboratory","text":"","code":"delete_laboratory(con, laboratory_id)"},{"path":"https://github.com/FlowWest/grunID/reference/delete_laboratory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Laboratory — delete_laboratory","text":"con DBI connection object obtained DBI::dbConnect() laboratory_id numeric ID targeted laboratory get_laboratories Note: laboratory associated assay result record, database restricts deleting laboratory. must first update records new laboratory reattempting delete laboratory. Consider using update_laboratory_status function wanting retire laboratory retaining value historic records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/delete_laboratory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete Laboratory — delete_laboratory","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_laboratories <- get_laboratories(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_laboratories) # to view the ID of the laboratory needing deletion #> Error in eval(expr, envir, enclos): object 'all_laboratories' not found  delete_laboratory(con, 1) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/delete_protocol.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Protocol — delete_protocol","title":"Delete Protocol — delete_protocol","text":"delete_protocol() deletes existing protocol protocol lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/delete_protocol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Protocol — delete_protocol","text":"","code":"delete_protocol(con, protocol_id)"},{"path":"https://github.com/FlowWest/grunID/reference/delete_protocol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Protocol — delete_protocol","text":"con DBI connection object obtained DBI::dbConnect() protocol_id numeric ID targeted protocol get_protocols Note: protocol associated assay result record, database restricts deleting protocol. must first update records new protocol reattempting delete protocol. Consider using update_protocol_status function wanting retire protocol retaining value historic records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/delete_protocol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete Protocol — delete_protocol","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_protocols <- get_protocols(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_protocols) # to view the ID of the protocol needing deletion #> Error in eval(expr, envir, enclos): object 'all_protocols' not found  delete_protocol(con, 1) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/delete_run_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Run Type — delete_run_type","title":"Delete Run Type — delete_run_type","text":"delete_run_type() deletes existing run type run type lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/delete_run_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Run Type — delete_run_type","text":"","code":"delete_run_type(con, run_type_id)"},{"path":"https://github.com/FlowWest/grunID/reference/delete_run_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Run Type — delete_run_type","text":"con DBI connection object obtained DBI::dbConnect() run_type_id numeric ID targeted run type get_run_types Note: run type associated sample, database restricts deleting run type. must first update records new run type reattempting delete run type. Consider using update_run_type_status function wanting retire run type retaining value historic records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/delete_run_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete Run Type — delete_run_type","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_run_types <- get_run_types(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_run_types) # to view the ID of the run type needing deletion #> Error in eval(expr, envir, enclos): object 'all_run_types' not found  delete_run_type(con, 1) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/delete_sample_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Sample Location — delete_sample_location","title":"Delete Sample Location — delete_sample_location","text":"delete_sample_location() deletes existing sample location sample location lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/delete_sample_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Sample Location — delete_sample_location","text":"","code":"delete_sample_location(con, sample_location_id)"},{"path":"https://github.com/FlowWest/grunID/reference/delete_sample_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Sample Location — delete_sample_location","text":"con DBI connection object obtained DBI::dbConnect() sample_location_id numeric ID targeted sample location get_sample_locations","code":""},{"path":"https://github.com/FlowWest/grunID/reference/delete_sample_location.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete Sample Location — delete_sample_location","text":"Note: sample location associated permit record, database restricts deleting sample location. must first update records new sample location reattempting delete sample location. Consider using update_sample_location_status function wanting retire sample location retaining value historic records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/delete_sample_location.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete Sample Location — delete_sample_location","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_sample_locations <- get_sample_locations(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_sample_locations) # to view the ID of the sample location needing deletion #> Error in eval(expr, envir, enclos): object 'all_sample_locations' not found  delete_sample_location(con, 4) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/delete_sample_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Sample Type — delete_sample_type","title":"Delete Sample Type — delete_sample_type","text":"delete_sample_type() deletes existing sample type sample type lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/delete_sample_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Sample Type — delete_sample_type","text":"","code":"delete_sample_type(con, sample_type_id)"},{"path":"https://github.com/FlowWest/grunID/reference/delete_sample_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Sample Type — delete_sample_type","text":"con DBI connection object obtained DBI::dbConnect() sample_type_id numeric ID targeted sample type get_sample_types Note: sample type associated sample, database restricts deleting sample type. must first update records new sample type reattempting delete sample type. Consider using update_sample_type_status function wanting retire sample type retaining value historic records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/delete_sample_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete Sample Type — delete_sample_type","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_sample_types <- get_sample_types(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_sample_types) # to view the ID of the sample type needing deletion #> Error in eval(expr, envir, enclos): object 'all_sample_types' not found  delete_sample_type(con, 1) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/delete_status_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Status Code — delete_status_code","title":"Delete Status Code — delete_status_code","text":"delete_status_code() deletes existing status code status code lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/delete_status_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Status Code — delete_status_code","text":"","code":"delete_status_code(con, status_code_id)"},{"path":"https://github.com/FlowWest/grunID/reference/delete_status_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Status Code — delete_status_code","text":"con DBI connection object obtained DBI::dbConnect() status_code_id numeric ID targeted status code get_status_codes Note: status code associated sample, database restricts deleting status code. must first update records new status code reattempting delete status code. Consider using update_status_code_status function wanting retire status code retaining value historic records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/delete_status_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete Status Code — delete_status_code","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_status_codes <- get_status_codes(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_status_codes) # to view the ID of the status code needing deletion #> Error in eval(expr, envir, enclos): object 'all_status_codes' not found  delete_status_code(con, 1) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/excel_column_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Excel Column Index — excel_column_index","title":"Excel Column Index — excel_column_index","text":"Letter indices used reference excel columns","code":""},{"path":"https://github.com/FlowWest/grunID/reference/excel_column_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Excel Column Index — excel_column_index","text":"","code":"excel_column_index"},{"path":"https://github.com/FlowWest/grunID/reference/excel_column_index.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Excel Column Index — excel_column_index","text":"object class character length 702.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/extract_previous_end_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Previous End Row — extract_previous_end_row","title":"Extract Previous End Row — extract_previous_end_row","text":"helper function used identify previous ending range cells within Synergy H1 excel workbook output","code":""},{"path":"https://github.com/FlowWest/grunID/reference/extract_previous_end_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Previous End Row — extract_previous_end_row","text":"","code":"extract_previous_end_row(cell_ranges)"},{"path":"https://github.com/FlowWest/grunID/reference/extract_previous_end_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Previous End Row — extract_previous_end_row","text":"cell_ranges vector strings representing cell ranges tables e.g. c(\"A1:B10\", \"A11:B21\")","code":""},{"path":"https://github.com/FlowWest/grunID/reference/extract_previous_end_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Previous End Row — extract_previous_end_row","text":"","code":"extract_previous_end_row(c(\"A1:B10\", \"A11:B21\")) #21 #> Error in extract_previous_end_row(c(\"A1:B10\", \"A11:B21\")): could not find function \"extract_previous_end_row\""},{"path":"https://github.com/FlowWest/grunID/reference/extract_sherlock_protocol.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Sherlock Protocol — extract_sherlock_protocol","title":"Extract Sherlock Protocol — extract_sherlock_protocol","text":"helper function parsing protocol settings within SynergyH1 output","code":""},{"path":"https://github.com/FlowWest/grunID/reference/extract_sherlock_protocol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Sherlock Protocol — extract_sherlock_protocol","text":"","code":"extract_sherlock_protocol(filepath)"},{"path":"https://github.com/FlowWest/grunID/reference/extract_sherlock_protocol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Sherlock Protocol — extract_sherlock_protocol","text":"TODO","code":""},{"path":"https://github.com/FlowWest/grunID/reference/fill_dual_assay_plate_map.html","id":null,"dir":"Reference","previous_headings":"","what":"fill_dual_assay_plate_map — fill_dual_assay_plate_map","title":"fill_dual_assay_plate_map — fill_dual_assay_plate_map","text":"Generates dual assay 384-well plate map list sample IDs","code":""},{"path":"https://github.com/FlowWest/grunID/reference/fill_dual_assay_plate_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fill_dual_assay_plate_map — fill_dual_assay_plate_map","text":"","code":"fill_dual_assay_plate_map(sample_ids)"},{"path":"https://github.com/FlowWest/grunID/reference/fill_dual_assay_plate_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fill_dual_assay_plate_map — fill_dual_assay_plate_map","text":"sample_ids list sample IDs populate plate map","code":""},{"path":"https://github.com/FlowWest/grunID/reference/fill_dual_assay_plate_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fill_dual_assay_plate_map — fill_dual_assay_plate_map","text":"list plate map tables","code":""},{"path":"https://github.com/FlowWest/grunID/reference/fill_dual_assay_plate_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fill_dual_assay_plate_map — fill_dual_assay_plate_map","text":"Generate Plate Map Dual Assay layout called generate_subsample_plate_map() fills alternating rows first, rows inbetween 384-well plate. Sample IDs populated left half 384-well plate replicated right half plate control blanks rows 12 24.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/fill_single_assay_plate_map.html","id":null,"dir":"Reference","previous_headings":"","what":"fill_single_assay_plate_map — fill_single_assay_plate_map","title":"fill_single_assay_plate_map — fill_single_assay_plate_map","text":"Generates single-assay 384-well plate map list sample IDs","code":""},{"path":"https://github.com/FlowWest/grunID/reference/fill_single_assay_plate_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fill_single_assay_plate_map — fill_single_assay_plate_map","text":"","code":"fill_single_assay_plate_map(sample_ids)"},{"path":"https://github.com/FlowWest/grunID/reference/fill_single_assay_plate_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fill_single_assay_plate_map — fill_single_assay_plate_map","text":"sample_ids list sample IDs populate plate map","code":""},{"path":"https://github.com/FlowWest/grunID/reference/fill_single_assay_plate_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fill_single_assay_plate_map — fill_single_assay_plate_map","text":"list plate map tables","code":""},{"path":"https://github.com/FlowWest/grunID/reference/fill_single_assay_plate_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fill_single_assay_plate_map — fill_single_assay_plate_map","text":"Generate Plate Map Single Assay v4 layout called generate_subsample_plate_map() fills samples 384-well layout blocks four (A1, B1, A2 B2 sample different assays). detail mapping structure, see grunID::plate_v4_mapping.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/generate_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a cell range — generate_range","title":"Generate a cell range — generate_range","text":"helper function used identify group cell ranges encompass tables containing type result within Synergy H1 excel workbook output","code":""},{"path":"https://github.com/FlowWest/grunID/reference/generate_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a cell range — generate_range","text":"","code":"generate_range(   table_type = c(\"raw fluorescence\", \"background fluorescence\", \"results\"),   column_header_row,   result_row_count,   wells_used,   time_intervals )"},{"path":"https://github.com/FlowWest/grunID/reference/generate_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a cell range — generate_range","text":"table_type type results table, either \"raw fluorescence\", \"background fluorescence\", \"results\" column_header_row row number containing column headers first table interest result_row_count Based plate size e.g., 96 well plate 32 rows results wells_used number wells containing samples controls time_intervals number reads samples processed","code":""},{"path":"https://github.com/FlowWest/grunID/reference/generate_ranges.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate all cell ranges for tables containing assay results — generate_ranges","title":"Generate all cell ranges for tables containing assay results — generate_ranges","text":"helper function used generate cell ranges type table within Synergy H1 excel workbook output","code":""},{"path":"https://github.com/FlowWest/grunID/reference/generate_ranges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate all cell ranges for tables containing assay results — generate_ranges","text":"","code":"generate_ranges(plate_size, wells_used, time_intervals, layout_start_row)"},{"path":"https://github.com/FlowWest/grunID/reference/generate_ranges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate all cell ranges for tables containing assay results — generate_ranges","text":"plate_size either 96 384 wells_used number wells containing samples controls time_intervals number reads samples processed","code":""},{"path":"https://github.com/FlowWest/grunID/reference/generate_subsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Subsample — generate_subsample","title":"Generate Subsample — generate_subsample","text":"Subsamples given sample event season.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/generate_subsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Subsample — generate_subsample","text":"","code":"generate_subsample(con, sampling_event, season)"},{"path":"https://github.com/FlowWest/grunID/reference/generate_subsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Subsample — generate_subsample","text":"con connection database sampling_event numeric value sampling event processing (.e. 1:10) season season want pull subsamples. season consists sampling events given year September 30th previous year October 1st.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/generate_subsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Subsample — generate_subsample","text":"named list containing subsample_for_sherlock table, subsample_summary table, remainders_for_gt_seq table. subsample_for_sherlock table contains samples selected process following columns: sample_id datetime_collected stream_name sample_bin_code sample_event_number scenario subsample_summary table contains short summary summarizing number samples given subsampling scenario stream, event, bin. contains following columns: stream event bin scenario subsamples remainders_for_gt_seq table contains samples selected subsampling process following columns: sample_id datetime_collected stream_name sample_bin_code sample_event_number scenario","code":""},{"path":"https://github.com/FlowWest/grunID/reference/generate_subsample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Subsample — generate_subsample","text":"function takes subsample samples returned field given sampling event given season. uses following subsampling logic: least 50% samples per site per event sampled. number samples odd, divide number 2 round resulting number nearest integer. total number samples given site given event less 20, process samples site/event. multiple bins represented set samples given site event, select 50% samples bin processing. total number samples bin less equal 5, process samples bin. rule contradicts “less 20” rule (), rule prioritized. example, receive sample set given site event Bins , B, C, D, E represented five samples (total sample size = 25), process samples site/event. Subsampling random.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/generate_subsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Subsample — generate_subsample","text":"","code":"# connect with database con <- gr_db_connect() #> ℹ refreshing Azure auth token #> ✔ refreshing Azure auth token ... done #>  #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  # subsample from all sampling events in season 2024 subsamples <- generate_subsample(con, 1, 2024) #> Error in eval(expr, envir, enclos): object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/generate_subsample_plate_map.html","id":null,"dir":"Reference","previous_headings":"","what":"generate_subsample_plate_map — generate_subsample_plate_map","title":"generate_subsample_plate_map — generate_subsample_plate_map","text":"Generates plate map list sample IDs","code":""},{"path":"https://github.com/FlowWest/grunID/reference/generate_subsample_plate_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate_subsample_plate_map — generate_subsample_plate_map","text":"","code":"generate_subsample_plate_map(sample_ids, plate_assay_structure, out_filepath)"},{"path":"https://github.com/FlowWest/grunID/reference/generate_subsample_plate_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate_subsample_plate_map — generate_subsample_plate_map","text":"sample_ids list sample IDs populate plate map plate_assay_structure Either dual_assay single_assay out_filepath Filename. include \".csv\" end filepath.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/generate_subsample_plate_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate_subsample_plate_map — generate_subsample_plate_map","text":".csv file rows :P columns 1:24 populated sample IDs control blanks","code":""},{"path":"https://github.com/FlowWest/grunID/reference/generate_subsample_plate_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"generate_subsample_plate_map — generate_subsample_plate_map","text":"Generate Plate Map Subsample Fill TODO","code":""},{"path":"https://github.com/FlowWest/grunID/reference/generate_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Thresholds — generate_threshold","title":"Generate Thresholds — generate_threshold","text":"`generate_threshold()` calculates raw fluorescence threshold values assay.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/generate_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Thresholds — generate_threshold","text":"","code":"generate_threshold(   con,   plate_run,   results_table,   strategy = \"twice average\",   .control_id = \"EBK\" )"},{"path":"https://github.com/FlowWest/grunID/reference/generate_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Thresholds — generate_threshold","text":"con valid connection database plate_run plate run object obtained either `add_plate_run` `get_plate_run` strategy strategy use computing thresholds .control_id identifier within plate run use control calculating thresholds, defaults \"NTC\"","code":""},{"path":"https://github.com/FlowWest/grunID/reference/generate_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Thresholds — generate_threshold","text":"table containing thresholds event, passed `update_assay_detections()`","code":""},{"path":"https://github.com/FlowWest/grunID/reference/generate_threshold.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Thresholds — generate_threshold","text":"assay plate run, threshold value calculated two times mean value last time step control blank wells. assay plate control blanks threshold value.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_agencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Agencies — get_agencies","title":"Retrieve Agencies — get_agencies","text":"get_agencies() returns agencies within database","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_agencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Agencies — get_agencies","text":"","code":"get_agencies(con, is_active = TRUE, all_results = FALSE)"},{"path":"https://github.com/FlowWest/grunID/reference/get_agencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Agencies — get_agencies","text":"con DBI connection object obtained DBI::dbConnect()","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/get_agencies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Agencies — get_agencies","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? agencies <- get_agencies(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/get_assays.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Assays — get_assays","title":"Retrieve Assays — get_assays","text":"get_assays() returns assays within database","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_assays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Assays — get_assays","text":"","code":"get_assays(con, is_active = TRUE, all_results = FALSE)"},{"path":"https://github.com/FlowWest/grunID/reference/get_assays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Assays — get_assays","text":"con DBI connection object obtained DBI::dbConnect()","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/get_assays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Assays — get_assays","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? assays <- get_assays(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/get_clean_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Query database for clean dataset — get_clean_dataset","title":"Query database for clean dataset — get_clean_dataset","text":"Query database clean dataset","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_clean_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query database for clean dataset — get_clean_dataset","text":"","code":"get_clean_dataset(   con,   filtered_samples,   heterozygote_filter = c(FALSE, TRUE),   failed_filter = c(FALSE, TRUE) )"},{"path":"https://github.com/FlowWest/grunID/reference/get_enum_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Enumerated Type Values — get_enum_values","title":"Get Enumerated Type Values — get_enum_values","text":"get_enum_values() returns existing values within enum","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_enum_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Enumerated Type Values — get_enum_values","text":"","code":"get_enum_values(   con,   enum = c(\"bin_code_enum\", \"survey_type_enum\", \"life_stage_enum\", \"origin_enum\",     \"run_mode_enum\", \"optics_enum\", \"light_source_enum\", \"lamp_energy_enum\",     \"well_location_enum\") )"},{"path":"https://github.com/FlowWest/grunID/reference/get_enum_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Enumerated Type Values — get_enum_values","text":"con DBI connection object obtained DBI::dbConnect() enum Provide one following: \"bin_code_enum\" Used generating sampling protocols sample IDs \"survey_type_enum\" Used describing survey types permits \"life_stage_enum\" Used specifying chinook life stage permits \"origin_enum\" Used specifying chinook origin permits \"run_mode_enum\" Used describing run mode Synergy H1 protocol \"optics_enum\" Used describing optics setting Synergy H1 protocol \"light_source_enum\" Used describing light source Synergy H1 protocol \"lamp_energy_enum\" Used describing lamp energy setting Synergy H1 protocol \"well_location_enum\" Used mapping Synergy H1 result output sample IDs well location assay results","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/get_enum_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Enumerated Type Values — get_enum_values","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  get_enum_values(con, \"bin_code_enum\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/get_field_sheet_event_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Sample Event Information for Creating a Field Sheet — get_field_sheet_event_plan","title":"Get Sample Event Information for Creating a Field Sheet — get_field_sheet_event_plan","text":"get_field_sheet_event_plan() called within create_season_field_sheets() retrieves sampling event information database needed prepare field sheets.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_field_sheet_event_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Sample Event Information for Creating a Field Sheet — get_field_sheet_event_plan","text":"","code":"get_field_sheet_event_plan(con, sample_event_id_arg)"},{"path":"https://github.com/FlowWest/grunID/reference/get_field_sheet_event_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Sample Event Information for Creating a Field Sheet — get_field_sheet_event_plan","text":"con DBI connection object sample_event_id numeric unique identifier targeted sampling event location Use get_sample_event query retrieve IDs database.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_field_sheet_event_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Sample Event Information for Creating a Field Sheet — get_field_sheet_event_plan","text":"list object containing required arguments create_field_sheet field_sheet_sample_plan dataframe containing content field sheet sample_event_number non-unique sample event ID first_sample_date date object YYYY-MM-DD representing first day sampling 2 day sampling event location_name sampling location name (e.g., \"Battle Creek\") location_code sampling location short code (e.g., \"BTC\")","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/get_genetic_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Genetic Methods — get_genetic_methods","title":"Retrieve Genetic Methods — get_genetic_methods","text":"get_genetic_methods() returns genetic methods within database","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_genetic_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Genetic Methods — get_genetic_methods","text":"","code":"get_genetic_methods(con, ...)"},{"path":"https://github.com/FlowWest/grunID/reference/get_genetic_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Genetic Methods — get_genetic_methods","text":"con DBI connection object obtained DBI::dbConnect()","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/get_genetic_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Genetic Methods — get_genetic_methods","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? protocols <- get_genetic_methods(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/get_genetic_run_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Genetic Results — get_genetic_run_results","title":"Query Genetic Results — get_genetic_run_results","text":"Get table results populated genetic_run_identification table.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_genetic_run_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Genetic Results — get_genetic_run_results","text":"","code":"get_genetic_run_results(con, run = NULL, sample_id = NULL, year = NULL)"},{"path":"https://github.com/FlowWest/grunID/reference/get_genetic_run_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Genetic Results — get_genetic_run_results","text":"con connection database run (optional) run filter results sample_id (optional) sample filter results year (optional) digit season filter results ","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_laboratories.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Laboratories — get_laboratories","title":"Retrieve Laboratories — get_laboratories","text":"get_laboratories() returns laboratories within database","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_laboratories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Laboratories — get_laboratories","text":"","code":"get_laboratories(con, is_active = TRUE, all_results = FALSE, ...)"},{"path":"https://github.com/FlowWest/grunID/reference/get_laboratories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Laboratories — get_laboratories","text":"con DBI connection object obtained DBI::dbConnect()","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/get_laboratories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Laboratories — get_laboratories","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? laboratories <- get_laboratories(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/get_plate_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Query for plate run — get_plate_run","title":"Query for plate run — get_plate_run","text":"Query plate run","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_plate_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query for plate run — get_plate_run","text":"","code":"get_plate_run(con, ...)"},{"path":"https://github.com/FlowWest/grunID/reference/get_protocols.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Protocols — get_protocols","title":"Retrieve Protocols — get_protocols","text":"get_protocols() returns protocols within database","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_protocols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Protocols — get_protocols","text":"","code":"get_protocols(con, ...)"},{"path":"https://github.com/FlowWest/grunID/reference/get_protocols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Protocols — get_protocols","text":"con DBI connection object obtained DBI::dbConnect()","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/get_protocols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Protocols — get_protocols","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? protocols <- get_protocols(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/get_raw_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Query database for raw dataset — get_raw_dataset","title":"Query database for raw dataset — get_raw_dataset","text":"Query database raw dataset","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_raw_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query database for raw dataset — get_raw_dataset","text":"","code":"get_raw_dataset(con, clean_results)"},{"path":"https://github.com/FlowWest/grunID/reference/get_run_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Run Types — get_run_types","title":"Retrieve Run Types — get_run_types","text":"get_run_types() returns run types within database","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_run_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Run Types — get_run_types","text":"","code":"get_run_types(con, is_active = TRUE, all_results = FALSE, ...)"},{"path":"https://github.com/FlowWest/grunID/reference/get_run_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Run Types — get_run_types","text":"con DBI connection object obtained DBI::dbConnect()","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/get_run_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Run Types — get_run_types","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? run_types <- get_run_types(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/get_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Samples — get_samples","title":"Get Samples — get_samples","text":"Get Samples","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Samples — get_samples","text":"","code":"get_samples(con, ...)"},{"path":"https://github.com/FlowWest/grunID/reference/get_samples_by_season.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Samples by Season — get_samples_by_season","title":"Get Samples by Season — get_samples_by_season","text":"View sample season status run (assigned)","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_samples_by_season.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Samples by Season — get_samples_by_season","text":"","code":"get_samples_by_season(   con,   season,   dataset = c(\"raw\", \"clean\", \"unprocessed\"),   heterozygote_filter = c(FALSE, TRUE),   failed_filter = c(FALSE, TRUE) )"},{"path":"https://github.com/FlowWest/grunID/reference/get_samples_by_season.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Samples by Season — get_samples_by_season","text":"con connection database season year format YYYY. can pass min max season c(YYYY, YYYY). season consists sampling events given year September 30th previous year October 1st. dataset either \"raw\", \"clean\", \"unprocessed\". heterozygote_filter defaults FALSE. TRUE, heterozygotes returned. failed_filter defaults FALSE. TRUE, \"failed\" assays (negative OTS28 early late, negative OTS16 spring winter)","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_samples_by_season.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Samples by Season — get_samples_by_season","text":"parameter dataset can used determine information included tibble. raw, clean, unprocessed datasets contain following variables: stream_name datetime_collected sample_event_number sample_id sherlock_run_assignment field_run_assignment fork_length_mm fin_clip status updated_at select dataset = \"raw\", tibble additionally contain: assay_name raw_fluorescence threshold positive_detection plate_run_id select dataset = \"unprocessed\", tibble additionally contain: assay_name sample_type_name raw_fluorescence background_value time well_location plate_run_id","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/get_samples_needing_action.html","id":null,"dir":"Reference","previous_headings":"","what":"Samples needing further genetic analysis — get_samples_needing_action","title":"Samples needing further genetic analysis — get_samples_needing_action","text":"get_samples_needing_action pulls sample IDs need genetic analysis.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_samples_needing_action.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Samples needing further genetic analysis — get_samples_needing_action","text":"","code":"get_samples_needing_action(con)"},{"path":"https://github.com/FlowWest/grunID/reference/get_samples_needing_action.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Samples needing further genetic analysis — get_samples_needing_action","text":"con valid connection database","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_samples_needing_action.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Samples needing further genetic analysis — get_samples_needing_action","text":"list following elements, containing list Sample IDs category: needs_ots_16 repeat_ots_28 repeat_ots_16 potential_heterozygotes","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_samples_needing_action.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Samples needing further genetic analysis — get_samples_needing_action","text":"get_samples_needing_action checks database table sample_status identify samples following categories: run OTS 28 Early/Late need run OTS 16 Spring/Winter run OTS 28 Early/Late produced negative result , indicating require run run OTS 16 Spring/Winter produced negative result , indicating require run Produced positive results assays either within OTS 28 Early/Late OTS 16 Spring/Winter, indicating potential heterozygotes","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_sample_locations.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Sample Locations — get_sample_locations","title":"Retrieve Sample Locations — get_sample_locations","text":"get_sample_locations() returns sample locations within database","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_sample_locations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Sample Locations — get_sample_locations","text":"","code":"get_sample_locations(con, is_active = TRUE, all_results = FALSE)"},{"path":"https://github.com/FlowWest/grunID/reference/get_sample_locations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Sample Locations — get_sample_locations","text":"con DBI connection object obtained DBI::dbConnect()","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/get_sample_locations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Sample Locations — get_sample_locations","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? sample_locations <- get_sample_locations(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/get_sample_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Sample Status — get_sample_status","title":"Get Sample Status — get_sample_status","text":"View current full sample status history","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_sample_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Sample Status — get_sample_status","text":"","code":"get_sample_status(con, sample_ids, full_history = FALSE)"},{"path":"https://github.com/FlowWest/grunID/reference/get_sample_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Sample Status — get_sample_status","text":"con connection database sample_ids vector sample ids update full_history set TRUE, return current previously assigned status sample ID","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/get_sample_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Sample Status — get_sample_status","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  sample_locations <- get_sample_locations(con,                                          sample_ids = c(\"FTH_RM1722_3_A_1\",                                                          \"FTH_RM1722_3_A_2\")) #> Error in get_sample_locations(con, sample_ids = c(\"FTH_RM1722_3_A_1\",     \"FTH_RM1722_3_A_2\")): unused argument (sample_ids = c(\"FTH_RM1722_3_A_1\", \"FTH_RM1722_3_A_2\"))"},{"path":"https://github.com/FlowWest/grunID/reference/get_sample_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Sample Types — get_sample_types","title":"Retrieve Sample Types — get_sample_types","text":"get_sample_types() returns sample types within database","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_sample_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Sample Types — get_sample_types","text":"","code":"get_sample_types(con, is_active = TRUE, all_results = FALSE)"},{"path":"https://github.com/FlowWest/grunID/reference/get_sample_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Sample Types — get_sample_types","text":"con DBI connection object obtained DBI::dbConnect()","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/get_sample_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Sample Types — get_sample_types","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? sample_types <- get_sample_types(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/get_status_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Status Codes — get_status_codes","title":"Retrieve Status Codes — get_status_codes","text":"get_status_codes() returns status codes within database","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_status_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Status Codes — get_status_codes","text":"","code":"get_status_codes(con, is_active = TRUE, all_results = FALSE, ...)"},{"path":"https://github.com/FlowWest/grunID/reference/get_status_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Status Codes — get_status_codes","text":"con DBI connection object obtained DBI::dbConnect()","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/get_status_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Status Codes — get_status_codes","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? sample_types <- get_status_codes(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/get_unprocessed_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Query database for unprocessed dataset — get_unprocessed_dataset","title":"Query database for unprocessed dataset — get_unprocessed_dataset","text":"Query database unprocessed dataset","code":""},{"path":"https://github.com/FlowWest/grunID/reference/get_unprocessed_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query database for unprocessed dataset — get_unprocessed_dataset","text":"","code":"get_unprocessed_dataset(con, clean_results)"},{"path":"https://github.com/FlowWest/grunID/reference/gr_db_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to Run ID Database — gr_db_connect","title":"Connect to Run ID Database — gr_db_connect","text":"create connection object Run ID Database. default function look config file using config::get() function. file found user provided username, host, port used. cases password obtained using Azure token generated using azure cli tool.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/gr_db_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to Run ID Database — gr_db_connect","text":"","code":"gr_db_connect(username = NULL, host = NULL, dbname = NULL)"},{"path":"https://github.com/FlowWest/grunID/reference/gr_db_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to Run ID Database — gr_db_connect","text":"username (optional) username login host (optional) host login","code":""},{"path":"https://github.com/FlowWest/grunID/reference/gr_db_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to Run ID Database — gr_db_connect","text":"\"PqConnection\" object used queries database","code":""},{"path":"https://github.com/FlowWest/grunID/reference/gr_db_connect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Connect to Run ID Database — gr_db_connect","text":"Azure accesstoken used password authentication, users must Azure CLI tool installed. verify try running az --version confirm version number additional information printed screen.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/gr_db_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to Run ID Database — gr_db_connect","text":"","code":"if (FALSE) {  # run with config file, file will be searched up directories starting from the working directory con <- gr_db_connect()  # run with username, dbname, and host passed in as arguemnts con <- gr_db_connect(                      username = \"myusername\",                      dbname = \"dbname\",                      host = \"host.com\" ) dplyr::tbl(con, \"agency\") }"},{"path":"https://github.com/FlowWest/grunID/reference/is_valid_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Database Connection is Valid — is_valid_connection","title":"Check Database Connection is Valid — is_valid_connection","text":"Check Database Connection Valid","code":""},{"path":"https://github.com/FlowWest/grunID/reference/is_valid_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Database Connection is Valid — is_valid_connection","text":"","code":"is_valid_connection(con)"},{"path":"https://github.com/FlowWest/grunID/reference/is_valid_sample_field_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function - checks field sheet data format — is_valid_sample_field_data","title":"Helper function - checks field sheet data format — is_valid_sample_field_data","text":"Helper function parsing input updating field sample data database. Called update_field_sheet_samples.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/is_valid_sample_field_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function - checks field sheet data format — is_valid_sample_field_data","text":"","code":"is_valid_sample_field_data(data)"},{"path":"https://github.com/FlowWest/grunID/reference/is_valid_sample_field_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function - checks field sheet data format — is_valid_sample_field_data","text":"Checks whether connection valid using is_valid_con checks class input variables.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/make_salvage_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Create salvage ids — make_salvage_ids","title":"Create salvage ids — make_salvage_ids","text":"Create salvage ids","code":""},{"path":"https://github.com/FlowWest/grunID/reference/make_salvage_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create salvage ids — make_salvage_ids","text":"","code":"make_salvage_ids(n_samples, year)"},{"path":"https://github.com/FlowWest/grunID/reference/make_salvage_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create salvage ids — make_salvage_ids","text":"n_samples total number samples create","code":""},{"path":"https://github.com/FlowWest/grunID/reference/ots_early_late_detection.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine Run identifcation after Early and Late Assays — ots_early_late_detection","title":"Determine Run identifcation after Early and Late Assays — ots_early_late_detection","text":"Determine Run identifcation Early Late Assays","code":""},{"path":"https://github.com/FlowWest/grunID/reference/ots_early_late_detection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine Run identifcation after Early and Late Assays — ots_early_late_detection","text":"","code":"ots_early_late_detection(   con,   sample_id,   results_table,   selection_strategy = c(\"recent priority\", \"positive priority\") )"},{"path":"https://github.com/FlowWest/grunID/reference/ots_early_late_detection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine Run identifcation after Early and Late Assays — ots_early_late_detection","text":"con database connection sample_id sample id perform run identification strategy strategy use multi assays found sample see \"details\" ","code":""},{"path":"https://github.com/FlowWest/grunID/reference/ots_early_late_detection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine Run identifcation after Early and Late Assays — ots_early_late_detection","text":"system allows users submit many assays per sample desired, however end order assign genetic run type sample single early, late, spring, winter assay must used. selection strategy gives function way select finds multiple assays sample. \"positive priority\" - choose positive results available assays needed \"recent priority\" - choose recent assays available assays needed.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/ots_winter_spring_detection.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine Run identifcation after Spring and Winter Assays — ots_winter_spring_detection","title":"Determine Run identifcation after Spring and Winter Assays — ots_winter_spring_detection","text":"Determine Run identifcation Spring Winter Assays","code":""},{"path":"https://github.com/FlowWest/grunID/reference/ots_winter_spring_detection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine Run identifcation after Spring and Winter Assays — ots_winter_spring_detection","text":"","code":"ots_winter_spring_detection(   con,   sample_id,   results_table,   selection_strategy = c(\"positive priority\", \"recent priority\") )"},{"path":"https://github.com/FlowWest/grunID/reference/ots_winter_spring_detection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine Run identifcation after Spring and Winter Assays — ots_winter_spring_detection","text":"con database connection sample_id sample id perform run identification strategy strategy use multi assays found sample see \"details\" ","code":""},{"path":"https://github.com/FlowWest/grunID/reference/ots_winter_spring_detection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine Run identifcation after Spring and Winter Assays — ots_winter_spring_detection","text":"system allows users submit manu assays per sample desired, however end order assign genetic run type sample single early, late, spring, winter assay must used. selection strategy gives function way select finds multiple assays sample. \"positive priority\" - choose postitive results available assays needed \"recent prioritt\" - choose recent assays available assays needed.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/parse_plate_flags.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Comment for EBK Flags — parse_plate_flags","title":"Parse Comment for EBK Flags — parse_plate_flags","text":"Parse plate comment extract plate related information EBK id's fail qa/qc check","code":""},{"path":"https://github.com/FlowWest/grunID/reference/parse_plate_flags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Comment for EBK Flags — parse_plate_flags","text":"","code":"parse_plate_flags(flag_text, flag_type)"},{"path":"https://github.com/FlowWest/grunID/reference/parse_plate_flags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Comment for EBK Flags — parse_plate_flags","text":"flag_text string parse flag_type flag parse ","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_field_sheet_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Sample Field Sheet Data — process_field_sheet_samples","title":"Process Sample Field Sheet Data — process_field_sheet_samples","text":"process_field_sheet_examples() takes sample field sheets converts database-ready formatting.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_field_sheet_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Sample Field Sheet Data — process_field_sheet_samples","text":"","code":"process_field_sheet_samples(filepath)"},{"path":"https://github.com/FlowWest/grunID/reference/process_field_sheet_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Sample Field Sheet Data — process_field_sheet_samples","text":"filepath filepath field sheet want prepare upload. Column names data types match following: Bin text value Bin FL Range (mm) Numeric value Sample # Numeric value Sample ID Text value Date Date (ideally format YYYY-MM-DD) Time Time FL (mm) Numeric value Field Run ID Numeric value Comments Text value","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_field_sheet_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Sample Field Sheet Data — process_field_sheet_samples","text":"tibble object containing data sheets @param filepath workbook required format update_field_sheet_samples. contains following variables: sample_id unique identifier sample recorded. datetime_collected date time (YYYY-MM-DD H:M:S) sample processed. fork_length_mm recorded fork length corresponding sample. field_run_type_id unique identifier field run type. field_comment recorded comments field regarding sample.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_field_sheet_samples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process Sample Field Sheet Data — process_field_sheet_samples","text":"See create_field_sheet get_field_sheet_event_plan information creating field sheet workbooks.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/process_field_sheet_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Sample Field Sheet Data — process_field_sheet_samples","text":"","code":"filepath <- \"data-raw/test.xlsx\" field_data_clean <- process_field_sheet_samples(filepath) #> Error: `path` does not exist: 'data-raw/test.xlsx'"},{"path":"https://github.com/FlowWest/grunID/reference/process_field_sheet_samples2.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Field Sheets Version 2 — process_field_sheet_samples2","title":"Process Field Sheets Version 2 — process_field_sheet_samples2","text":"Process Field Sheets Version 2","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_field_sheet_samples2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Field Sheets Version 2 — process_field_sheet_samples2","text":"","code":"process_field_sheet_samples2(filepath)"},{"path":"https://github.com/FlowWest/grunID/reference/process_plate_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Plate Layout — process_plate_layout","title":"Process Plate Layout — process_plate_layout","text":"helper function mapping plate layout location sample identifier","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_plate_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Plate Layout — process_plate_layout","text":"","code":"process_plate_layout(filepath, plate_size, layout_start_row)"},{"path":"https://github.com/FlowWest/grunID/reference/process_raw_assay_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Raw Assay Results — process_raw_assay_results","title":"Process Raw Assay Results — process_raw_assay_results","text":"helper function called `process_sherlock` reads excel containing SHERLOCK output.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_raw_assay_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Raw Assay Results — process_raw_assay_results","text":"","code":"process_raw_assay_results(   filepath,   ranges,   plate_size,   layout,   has_background_fluorescence )"},{"path":"https://github.com/FlowWest/grunID/reference/process_raw_sample_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Raw Sample Plan — process_raw_sample_plan","title":"Process Raw Sample Plan — process_raw_sample_plan","text":"process_raw_sample_plan","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_raw_sample_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Raw Sample Plan — process_raw_sample_plan","text":"","code":"process_raw_sample_plan(filepath, season)"},{"path":"https://github.com/FlowWest/grunID/reference/process_raw_sample_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Raw Sample Plan — process_raw_sample_plan","text":"filepath filepath raw sample plan processed season season sample plan developed. format YYYY","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_raw_sample_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Raw Sample Plan — process_raw_sample_plan","text":"tidy dataframe can passed directly add_sample_plan(). following columns: location_code sample_event_number first_sample_date sample_bin_code min_fork_length max_fork_length expected_number_of_samples","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_raw_sample_plan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process Raw Sample Plan — process_raw_sample_plan","text":"function assigns maximum fork length 200mm fork length bins \"plus\" (.e. fork length bin 130+ assigned minimum fork length 130 maximum fork length 200). function also assign first_sample_date January 1st season (pass season = 2024, first_sample_date 2024-01-01).","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_raw_sample_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Raw Sample Plan — process_raw_sample_plan","text":"","code":"# example database connection process_raw_sample_plan(filepath = \"data-raw/2024_raw_sample_plan.xlsx\", season = 2024) #> Error: `path` does not exist: 'data-raw/2024_raw_sample_plan.xlsx'"},{"path":"https://github.com/FlowWest/grunID/reference/process_sherlock.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Sherlock Results — process_sherlock","title":"Process Sherlock Results — process_sherlock","text":"process_sherlock() extracts transforms result data Synergy H1 reader","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_sherlock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Sherlock Results — process_sherlock","text":"","code":"process_sherlock(   filepath,   sample_type = c(\"mucus\", \"fin clip\"),   layout_type = c(\"split_plate_early_late\", \"split_plate_late_early\",     \"split_plate_spring_winter\", \"split_plate_winter_spring\", \"triplicate\",     \"single_assay_ots28_early\", \"single_assay_ots28_late\", \"single_assay_ots16_spring\",     \"single_assay_ots16_winter\", \"custom\"),   plate_run_id = NULL,   plate_size = c(96, 384),   custom_layout_filepath = NULL )"},{"path":"https://github.com/FlowWest/grunID/reference/process_sherlock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Sherlock Results — process_sherlock","text":"filepath Synergy H1 reader output excel file corresponding plate run layout sheet titled \"plate_map\" sample_type either mucus fin_clip layout_type either split_plate_early_late, split_plate_late_early, split_plate_spring_winter, split_plate_winter_spring, triplicate, single_assay_ots28_early, single_assay_ots28_late, single_assay_ots16_spring, single_assay_ots16_winter plate_run_id plate run identifier generated running add_plate_run(). plate_size either 96 384","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_sherlock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Sherlock Results — process_sherlock","text":"table passed add_raw_assay_results():","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_sherlock.html","id":"-raw-assay-results","dir":"Reference","previous_headings":"","what":"1) raw_assay_results","title":"Process Sherlock Results — process_sherlock","text":"sample_id raw_fluorescence background_value time plate_run_id well_location","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_sherlock.html","id":"sample-details","dir":"Reference","previous_headings":"","what":"Sample Details","title":"Process Sherlock Results — process_sherlock","text":"Synergy H1 result output plate runs organized using generic identifiers need mapped real sample identifiers order properly associate results correct sample id database.output file’s “Layout” section contains well locations samples encoded non-unique generic sample ids (e.g., SPL1, BLK). number rows columns Layout vary based plate size. plate size 96 rows :H columns 1:12 plate size 384 rows :P columns 1:24. results sample found within columns letter-number combination well location captured Layout section (e.g., SPL1 row column 3, measurements time step recorded column labeled A3). map sample ids generic identifiers produced Synergy H1 software (e.g., SPL1 A3), user must provide true sample ids metadata well location dataframe containing columns: location: (character) letter-number combination based Synergy H1 Layout grid (e.g., A3) sample_id: (character) unique ID mucus swab fin clip made site code, year, sample event, sampling bin, count within sampling bin (e.g., BTC22_3_A_1) sample_type: (numeric) provide 1 mucus 2 fin clip assay_id: (numeric) ID assay types (e.g., 1 = OTS28 Early 1), use get_assay() view available options. plate_run_id: (numeric) ID returned running add_plate_run(), function creates new plate run record database associate important metadata assay results","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_sherlock.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Sherlock Results — process_sherlock","text":"","code":"sample_details = readr::read_csv(\"data-raw/sample_layout_template_384.csv\") #> Error: 'data-raw/sample_layout_template_384.csv' does not exist in current working directory ('C:/Users/emanuel/projects/jpe/grunID/docs/reference'). process_sherlock(filepath = \"data-raw/081022_Chnk_JPE_Early_Plates7-10_results.xlsx\",                  sample_details = sample_details,                  plate_size = 384) #> Error in process_sherlock(filepath = \"data-raw/081022_Chnk_JPE_Early_Plates7-10_results.xlsx\",     sample_details = sample_details, plate_size = 384): unused argument (sample_details = sample_details)"},{"path":"https://github.com/FlowWest/grunID/reference/process_well_sample_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Sample Details — process_well_sample_details","title":"Get Sample Details — process_well_sample_details","text":"process_well_sample_details reads plate run layout sample identifiers can mapped output Synergy H1 reader.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_well_sample_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Sample Details — process_well_sample_details","text":"","code":"process_well_sample_details(   filepath,   sample_type = c(\"mucus\", \"fin clip\"),   layout_type = c(\"split_plate_early_late\", \"split_plate_late_early\",     \"split_plate_spring_winter\", \"split_plate_winter_spring\", \"triplicate\",     \"single_assay_ots28_early\", \"single_assay_ots28_late\", \"single_assay_ots16_spring\",     \"single_assay_ots16_winter\", \"custom\"),   plate_run_id,   assay_order = NULL,   custom_layout = NULL )"},{"path":"https://github.com/FlowWest/grunID/reference/process_well_sample_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Sample Details — process_well_sample_details","text":"filepath Synergy H1 reader output excel file corresponding plate run layout sheet titled \"Plate Map\" sample_type either mucus fin_clip layout_type either split_plate_early_late, split_plate_late_early, split_plate_spring_winter, split_plate_winter_spring, triplicate, single_assay_ots28_early, single_assay_ots28_late, single_assay_ots16_spring, single_assay_ots16_winter plate_run_id plate run identifier generated running add_plate_run()","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_well_sample_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Sample Details — process_well_sample_details","text":"table passed process_sherlock():","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_well_sample_details.html","id":"plate-layout","dir":"Reference","previous_headings":"","what":"plate_layout","title":"Get Sample Details — process_well_sample_details","text":"location sample_id sample_type_id assay_id plate_run_id","code":""},{"path":"https://github.com/FlowWest/grunID/reference/process_well_sample_details.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Sample Details — process_well_sample_details","text":"function called user wants interact database. alternative version function, process_well_sample_details_offline, processes sherlock output without interacting database. output function used sample_details argument process_sherlock() .e. used connect generic sample identifiers produced Synergy H1 reader sample identifiers database. layout_type argument split_plate, divide plate columns 1:12 13:24 assigns assays based following logic: split_plate_early_late: columns 1:12 OTS 28 Early columns 13:24 OTS 28 Late split_plate_late_early: columns 1:12 OTS 28 Late columns 13:24 OTS 28 Early split_plate_spring_winter: columns 1:12 OTS 16 Spring columns 13:24 OTS 16 Winter split_plate_winter_spring: columns 1:12 OTS 16 Winter columns 13:24 OTS 16 Spring layout_type argument triplicate, assay ids assigned follows: rows , E, , M OTS 28 Early rows B, F, J, N OTS 28 Late rows C, G, K, O OTS 16 Spring rows D, H, L, P OTS 16 Winter layout_type one single_assay_ots28_early, single_assay_ots28_late, single_assay_ots16_spring, single_assay_ots16_winter, samples processed plate run assigned assay.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch App — run_app","title":"Launch App — run_app","text":"run_app() launches shiny application allows user upload data run ID database.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch App — run_app","text":"","code":"run_app(config_path = NULL, ...)"},{"path":"https://github.com/FlowWest/grunID/reference/run_app.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Launch App — run_app","text":"grunID application can run user completed plate run assay results. application calls add_new_plate_results().","code":""},{"path":"https://github.com/FlowWest/grunID/reference/run_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch App — run_app","text":"","code":"grunID::run_app() #> Loading required package: shiny #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.4.4     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.3     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors #>  #> Attaching package: 'DT' #> The following objects are masked from 'package:shiny': #>  #>     dataTableOutput, renderDataTable #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?"},{"path":"https://github.com/FlowWest/grunID/reference/run_genetic_identification.html","id":null,"dir":"Reference","previous_headings":"","what":"Run genetic identification — run_genetic_identification","title":"Run genetic identification — run_genetic_identification","text":"Run genetic identification","code":""},{"path":"https://github.com/FlowWest/grunID/reference/run_genetic_identification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run genetic identification — run_genetic_identification","text":"","code":"run_genetic_identification(   con,   sample_id = NULL,   location = NULL,   year = NULL,   selection_strategy = \"positive priority\",   plate_comment,   destination_table,   sample_table,   results_table,   sample_status_table )"},{"path":"https://github.com/FlowWest/grunID/reference/run_genetic_identification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run genetic identification — run_genetic_identification","text":"con connection database sample_id optional sample id run identification location optional location identification year optional year identification selection_strategy selection strategy help resolve cases many assays exists per sample","code":""},{"path":"https://github.com/FlowWest/grunID/reference/sample_filter_to_season.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter dataset by season — sample_filter_to_season","title":"Filter dataset by season — sample_filter_to_season","text":"Filter dataset season","code":""},{"path":"https://github.com/FlowWest/grunID/reference/sample_filter_to_season.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter dataset by season — sample_filter_to_season","text":"","code":"sample_filter_to_season(con, season)"},{"path":"https://github.com/FlowWest/grunID/reference/set_sample_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Status Code — set_sample_status","title":"Set Status Code — set_sample_status","text":"Set status code existing samples","code":""},{"path":"https://github.com/FlowWest/grunID/reference/set_sample_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Status Code — set_sample_status","text":"","code":"set_sample_status(con, sample_ids, sample_status_code, comment = NULL)"},{"path":"https://github.com/FlowWest/grunID/reference/set_sample_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Status Code — set_sample_status","text":"con connection database sample_ids vector sample ids update status status code use update created status assigned automatically new sample ID generated prepped sample tube created field sample tube field collected return field sample tube returned field analysis sample analyzed stored sample storage archived sample sent tissue archive lab sample another lab","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/set_sample_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Status Code — set_sample_status","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  sample_locations <- set_sample_locations(con,                                          sample_ids = c(\"FTH_RM1722_3_A_1\",                                                          \"FTH_RM1722_3_A_2\"),                                          status = \"prepped\",                                          comment = \"ready for pickup\") #> Error in set_sample_locations(con, sample_ids = c(\"FTH_RM1722_3_A_1\",     \"FTH_RM1722_3_A_2\"), status = \"prepped\", comment = \"ready for pickup\"): could not find function \"set_sample_locations\""},{"path":"https://github.com/FlowWest/grunID/reference/template_dataframes.html","id":null,"dir":"Reference","previous_headings":"","what":"Templates — template_dataframes","title":"Templates — template_dataframes","text":"Template data frames assist users providing correct format adding new items database","code":""},{"path":"https://github.com/FlowWest/grunID/reference/template_dataframes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Templates — template_dataframes","text":"","code":"protocol_template"},{"path":"https://github.com/FlowWest/grunID/reference/template_dataframes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Templates — template_dataframes","text":"object class data.frame 1 rows 18 columns.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_agency.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Agency — update_agency","title":"Update Agency — update_agency","text":"update_agency() updates existing agency agency lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_agency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Agency — update_agency","text":"","code":"update_agency(con, agency_id, agency)"},{"path":"https://github.com/FlowWest/grunID/reference/update_agency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Agency — update_agency","text":"con DBI connection object obtained DBI::dbConnect() agency_id numeric ID targeted agency get_agencies agency valid agency dataframe following: code character short code agency agency_name character agency's proper name","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_agency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Agency — update_agency","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_agencies <- get_agencies(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_agencies) # to view the ID of the agency needing updates #> Error in eval(expr, envir, enclos): object 'all_agencies' not found updated_agency <- data.frame(code = \"UCD\",                          agency_name = \"University of California, Davis\") update_agency(con, 4, updated_agency) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_agency_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Agency Status — update_agency_status","title":"Update Agency Status — update_agency_status","text":"update_agency_status() changes active flag existing agency agency lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_agency_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Agency Status — update_agency_status","text":"","code":"update_agency_status(con, agency_id, set_active = TRUE)"},{"path":"https://github.com/FlowWest/grunID/reference/update_agency_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Agency Status — update_agency_status","text":"con DBI connection object obtained DBI::dbConnect() agency_id numeric ID targeted agency get_agencies set_active boolean, TRUE activating FALSE deactivating. record active, returned default get_agencies called. helps preserve look values valid historic contexts, longer valid current data records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_agency_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Agency Status — update_agency_status","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_agencies <- get_agencies(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_agencies) # to view the ID of the agency needing status change #> Error in eval(expr, envir, enclos): object 'all_agencies' not found  #deactivate update_agency_status(con, 4, set_active=FALSE) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found #reactivate update_agency_status(con, 4) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_assay.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Assay — update_assay","title":"Update Assay — update_assay","text":"update_assay() updates existing assay type assay lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_assay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Assay — update_assay","text":"","code":"update_assay(con, assay_id, assay)"},{"path":"https://github.com/FlowWest/grunID/reference/update_assay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Assay — update_assay","text":"con DBI connection object obtained DBI::dbConnect() assay_id numeric ID targeted assay get_assays assay valid assay dataframe following: code character short code assay assay_name character assay's name description character Short description assay","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_assay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Assay — update_assay","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_assays <- get_assays(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_assays) # to view the ID of the assay needing updates #> Error in eval(expr, envir, enclos): object 'all_assays' not found updated_assay <- data.frame(code = \"OTS28E1\",                             assay_name = \"Ots28 Early 1\",                             description = \"Targets GREB1L region\")  update_assay(con, 1, updated_assay) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_assay_detection.html","id":null,"dir":"Reference","previous_headings":"","what":"Set detection for assay results — update_assay_detection","title":"Set detection for assay results — update_assay_detection","text":"`update_assay_detection()` updates assay result table positive detections , depending assay, genetic run type identification.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_assay_detection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set detection for assay results — update_assay_detection","text":"","code":"update_assay_detection(con, thresholds, .control_id = \"NTC\")"},{"path":"https://github.com/FlowWest/grunID/reference/update_assay_detection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set detection for assay results — update_assay_detection","text":"con valid connection database thresholds threshold values calculated `generate_threshold` .control_id identifier used find control variable","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_assay_detection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set detection for assay results — update_assay_detection","text":"number assay results added assay_result table number samples updated genetic_run_identification table.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_assay_detection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set detection for assay results — update_assay_detection","text":"assay result table updated reflect whether assays plate run produced raw fluorescence values exceed threshold calculated `generate_threshold()`, resulting positive negative detection (TRUE FALSE, TRUE means assay positive detection). database checked whether ots_28 ots_16 run samples. , samples added genetic_run_identification table database genetic identification number (see `add_genetic_identification` details).","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_assay_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Assay Status — update_assay_status","title":"Update Assay Status — update_assay_status","text":"update_assay_status() changes active flag existing assay type assay lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_assay_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Assay Status — update_assay_status","text":"","code":"update_assay_status(con, assay_id, set_active = TRUE)"},{"path":"https://github.com/FlowWest/grunID/reference/update_assay_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Assay Status — update_assay_status","text":"con DBI connection object obtained DBI::dbConnect() assay_id numeric ID targeted assay get_assays set_active boolean, TRUE activating FALSE deactivating. record active, returned default get_assays called. helps preserve look values valid historic contexts, longer valid current data records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_assay_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Assay Status — update_assay_status","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_assays <- get_assays(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_assays) # to view the ID of the assay needing status change #> Error in eval(expr, envir, enclos): object 'all_assays' not found  #deactivate update_assay_status(con, 1, set_active=FALSE) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found #reactivate update_assay_status(con, 1) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_enum_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Enumerated Type Value — update_enum_value","title":"Update Enumerated Type Value — update_enum_value","text":"update_enum_value() rename existing value","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_enum_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Enumerated Type Value — update_enum_value","text":"","code":"update_enum_value(   con,   enum = c(\"bin_code_enum\", \"survey_type_enum\", \"life_stage_enum\", \"origin_enum\",     \"run_mode_enum\", \"optics_enum\", \"light_source_enum\", \"lamp_energy_enum\",     \"well_location_enum\"),   existing_enum_value,   new_enum_value )"},{"path":"https://github.com/FlowWest/grunID/reference/update_enum_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Enumerated Type Value — update_enum_value","text":"con DBI connection object obtained DBI::dbConnect() enum Provide one following: \"bin_code_enum\" Used generating sampling protocols sample IDs \"survey_type_enum\" Used describing survey types permits \"life_stage_enum\" Used specifying chinook life stage permits \"origin_enum\" Used specifying chinook origin permits \"run_mode_enum\" Used describing run mode Synergy H1 protocol \"optics_enum\" Used describing optics setting Synergy H1 protocol \"light_source_enum\" Used describing light source Synergy H1 protocol \"lamp_energy_enum\" Used describing lamp energy setting Synergy H1 protocol \"well_location_enum\" Used mapping Synergy H1 result output sample IDs well location assay results existing_enum_value existing value targeted renamed new_enum_value new name existing value","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_enum_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Enumerated Type Value — update_enum_value","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  get_enum_values(con, \"life_stage_enum\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found update_enum_value(con, \"life_stage_enum\",                   \"Spawned Adult/Carcass\", \"Spawned Adult Carcass\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_field_sheet_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Sample Field Sheet Data — update_field_sheet_samples","title":"Update Sample Field Sheet Data — update_field_sheet_samples","text":"update_field_sheet_samples() takes formatted tibble field sample data updates samples database.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_field_sheet_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Sample Field Sheet Data — update_field_sheet_samples","text":"","code":"update_field_sheet_samples(con, field_data)"},{"path":"https://github.com/FlowWest/grunID/reference/update_field_sheet_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Sample Field Sheet Data — update_field_sheet_samples","text":"con DBI connection object obtained DBI::dbConnect() field_data field data processed using process_field_sheet_samples See create_field_sheet get_field_sheet_event_plan information creating field sheet workbooks, process_field_sheet_samples information processing raw data updating database.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_field_sheet_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Sample Field Sheet Data — update_field_sheet_samples","text":"return objects.","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_field_sheet_samples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update Sample Field Sheet Data — update_field_sheet_samples","text":"function requires valid connection database processed dataset variables correct format. Errors may due invalid data structure connection; see is_valid_con is_valid_sample_field_data information. Variables follows: sample_id unique identifier sample recorded, class \"character\". datetime_collected date time (YYYY-MM-DD H:M:S) sample processed, class \"datetime\" (\"POSIXct\" \"POSIXt\") fork_length_mm recorded fork length corresponding sample, class \"numeric\". field_run_type_id unique identifier field run type, class \"numeric\". field_comment recorded comments field regarding sample, class \"character\".","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_field_sheet_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Sample Field Sheet Data — update_field_sheet_samples","text":"","code":"con <- grunID::gr_db_connect() #> ℹ refreshing Azure auth token #> ✔ refreshing Azure auth token ... done #>  #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  filepath <- \"data-raw/test.xlsx\" field_data_clean <- process_field_sheet_samples(filepath) #> Error: `path` does not exist: 'data-raw/test.xlsx' update_field_sheet_samples(con, field_data_clean) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_genetic_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Genetic Method — update_genetic_method","title":"Update Genetic Method — update_genetic_method","text":"update_genetic_method() updates existing genetic method genetic method lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_genetic_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Genetic Method — update_genetic_method","text":"","code":"update_genetic_method(con, genetic_method_id, genetic_method)"},{"path":"https://github.com/FlowWest/grunID/reference/update_genetic_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Genetic Method — update_genetic_method","text":"con DBI connection object obtained DBI::dbConnect() genetic_method_id numeric ID targeted genetic method get_genetic_methods genetic_method valid genetic method dataframe following: code character 4 letter code caps method_name character Short name method description character Brief description method","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_genetic_method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Genetic Method — update_genetic_method","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_methods <- get_genetic_methods(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_methods) # to view the ID of the genetic method needing updates #> Error in eval(expr, envir, enclos): object 'all_methods' not found  updated_method <- data.frame(code = \"SHLK\", method_name = \"Sherlock\",                          description = \"Changed the description\") update_genetic_method(con, genetic_method_id = 1, updated_method) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_genetic_method_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Change Agency Status — update_genetic_method_status","title":"Change Agency Status — update_genetic_method_status","text":"update_genetic_method_status() changes active flag existing genetic method genetic method lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_genetic_method_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change Agency Status — update_genetic_method_status","text":"","code":"update_genetic_method_status(con, genetic_method_id, set_active = TRUE)"},{"path":"https://github.com/FlowWest/grunID/reference/update_genetic_method_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change Agency Status — update_genetic_method_status","text":"con DBI connection object obtained DBI::dbConnect() genetic_method_id numeric ID targeted genetic method get_agencies set_active boolean, TRUE activating FALSE deactivating. record active, returned default get_agencies called. helps preserve look values valid historic contexts, longer valid current data records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_genetic_method_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change Agency Status — update_genetic_method_status","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_agencies <- get_agencies(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_agencies) # to view the ID of the genetic method needing status change #> Error in eval(expr, envir, enclos): object 'all_agencies' not found  #deactivate update_genetic_method_status(con, 4, set_active=FALSE) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found #reactivate update_genetic_method_status(con, 4) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_genetic_run_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Genetic Run ID — update_genetic_run_id","title":"Update Genetic Run ID — update_genetic_run_id","text":"Updates genetic id sample database","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_genetic_run_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Genetic Run ID — update_genetic_run_id","text":"","code":"update_genetic_run_id(con, sample_id, run_type)"},{"path":"https://github.com/FlowWest/grunID/reference/update_genetic_run_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Genetic Run ID — update_genetic_run_id","text":"sample_id sample id update run identification run_type run code update sample , one \"FAL\", \"SPR\", \"WIN\", \"HET\", \"UNK\"","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_laboratory.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Laboratory — update_laboratory","title":"Update Laboratory — update_laboratory","text":"update_laboratory() updates existing laboratory laboratory lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_laboratory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Laboratory — update_laboratory","text":"","code":"update_laboratory(con, laboratory_id, laboratory)"},{"path":"https://github.com/FlowWest/grunID/reference/update_laboratory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Laboratory — update_laboratory","text":"con DBI connection object obtained DBI::dbConnect() laboratory_id numeric ID targeted laboratory get_laboratories laboratory valid laboratory dataframe containing following: code Short code representing laboratory name laboratory_name Laboratory full name description Brief description laboratory","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_laboratory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Laboratory — update_laboratory","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_laboratories <- get_laboratories(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_laboratories) # to view the ID of the laboratory needing updates #> Error in eval(expr, envir, enclos): object 'all_laboratories' not found  updated_laboratory <- all_laboratories[1, 2:4] #> Error in eval(expr, envir, enclos): object 'all_laboratories' not found updated_laboratory$laboratory_name <- \"The Department of Water Resources Genetic Monitoring Laboratory\" #> Error: object 'updated_laboratory' not found update_laboratory(con, 1, updated_laboratory) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_laboratory_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Laboratory Status — update_laboratory_status","title":"Update Laboratory Status — update_laboratory_status","text":"update_laboratory_status() changes active flag existing laboratory laboratory lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_laboratory_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Laboratory Status — update_laboratory_status","text":"","code":"update_laboratory_status(con, laboratory_id, set_active = TRUE)"},{"path":"https://github.com/FlowWest/grunID/reference/update_laboratory_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Laboratory Status — update_laboratory_status","text":"con DBI connection object obtained DBI::dbConnect() laboratory_id numeric ID targeted laboratory get_laboratories set_active boolean, TRUE activating FALSE deactivating. record active, returned default get_laboratories called. helps preserve look values valid historic contexts, longer valid current data records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_laboratory_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Laboratory Status — update_laboratory_status","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_laboratories <- get_laboratories(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_laboratories) # to view the ID of the laboratory needing status change #> Error in eval(expr, envir, enclos): object 'all_laboratories' not found  #deactivate update_laboratory_status(con, 4, set_active=FALSE) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found #reactivate update_laboratory_status(con, 4) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_protocol.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Protocol — update_protocol","title":"Update Protocol — update_protocol","text":"update_protocol() updates existing protocol protocol lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_protocol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Protocol — update_protocol","text":"","code":"update_protocol(con, protocol_id, protocol)"},{"path":"https://github.com/FlowWest/grunID/reference/update_protocol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Protocol — update_protocol","text":"con DBI connection object obtained DBI::dbConnect() protocol_id numeric ID targeted protocol get_protocols protocol valid protocol dataframe, reference protocol_template example","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_protocol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Protocol — update_protocol","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_protocols <- get_protocols(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_protocols) # to view the ID of the protocol needing updates #> Error in eval(expr, envir, enclos): object 'all_protocols' not found  updated_protocol <- protocol_template updated_protocol$software_version <- \"3.11.20\" update_protocol(con, 1, updated_protocol) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_protocol_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Protocol Status — update_protocol_status","title":"Update Protocol Status — update_protocol_status","text":"update_protocol_status() changes active flag existing protocol protocol lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_protocol_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Protocol Status — update_protocol_status","text":"","code":"update_protocol_status(con, protocol_id, set_active = TRUE)"},{"path":"https://github.com/FlowWest/grunID/reference/update_protocol_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Protocol Status — update_protocol_status","text":"con DBI connection object obtained DBI::dbConnect() protocol_id numeric ID targeted protocol get_agencies set_active boolean, TRUE activating FALSE deactivating. record active, returned default get_agencies called. helps preserve look values valid historic contexts, longer valid current data records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_protocol_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Protocol Status — update_protocol_status","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_agencies <- get_agencies(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_agencies) # to view the ID of the protocol needing status change #> Error in eval(expr, envir, enclos): object 'all_agencies' not found  #deactivate update_protocol_status(con, 4, set_active=FALSE) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found #reactivate update_protocol_status(con, 4) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_run_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Run Type — update_run_type","title":"Update Run Type — update_run_type","text":"update_run_type() updates existing run type run type lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_run_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Run Type — update_run_type","text":"","code":"update_run_type(con, run_type_id, run_type)"},{"path":"https://github.com/FlowWest/grunID/reference/update_run_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Run Type — update_run_type","text":"con DBI connection object obtained DBI::dbConnect() run_type_id numeric ID targeted run type get_run_types run_type valid run type dataframe containing following: code Short code representing run type name run_name Run type full name description Brief description run type","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_run_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Run Type — update_run_type","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_run_types <- get_run_types(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_run_types) # to view the ID of the run type needing updates #> Error in eval(expr, envir, enclos): object 'all_run_types' not found  updated_run_type <- all_run_types[1, 2:4] #> Error in eval(expr, envir, enclos): object 'all_run_types' not found updated_run_type$run_name <- \"New Name Run\" #> Error: object 'updated_run_type' not found update_run_type(con, 1, updated_run_type) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_run_type_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Run Type Status — update_run_type_status","title":"Update Run Type Status — update_run_type_status","text":"update_run_type_status() changes active flag existing run type run type lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_run_type_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Run Type Status — update_run_type_status","text":"","code":"update_run_type_status(con, run_type_id, set_active = TRUE)"},{"path":"https://github.com/FlowWest/grunID/reference/update_run_type_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Run Type Status — update_run_type_status","text":"con DBI connection object obtained DBI::dbConnect() run_type_id numeric ID targeted run type get_agencies set_active boolean, TRUE activating FALSE deactivating. record active, returned default get_agencies called. helps preserve look values valid historic contexts, longer valid current data records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_run_type_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Run Type Status — update_run_type_status","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_run_types <- get_run_types(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_run_types) # to view the ID of the run type needing status change #> Error in eval(expr, envir, enclos): object 'all_run_types' not found  #deactivate update_run_type_status(con, 4, set_active=FALSE) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found #reactivate update_run_type_status(con, 4) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_sample_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Sample Location — update_sample_location","title":"Update Sample Location — update_sample_location","text":"update_sample_location() updates existing sample location sample location lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_sample_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Sample Location — update_sample_location","text":"","code":"update_sample_location(con, sample_location_id, sample_location)"},{"path":"https://github.com/FlowWest/grunID/reference/update_sample_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Sample Location — update_sample_location","text":"con DBI connection object obtained DBI::dbConnect() sample_location_id numeric ID targeted sample location get_sample_locations sample_location valid sample location dataframe following: code character short code agency agency_name character agency's proper name","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_sample_location.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Sample Location — update_sample_location","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_sample_locations <- get_sample_locations(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_sample_locations) # to view the ID of the sample location needing updates #> Error in eval(expr, envir, enclos): object 'all_sample_locations' not found updated_sample_location <- data.frame(code = \"UCD\",                          agency_name = \"University of California, Davis\") update_sample_location(con, 4, updated_sample_location) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_sample_location_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Sample Location Status — update_sample_location_status","title":"Update Sample Location Status — update_sample_location_status","text":"update_sample_location_status() changes active flag existing sample location sample location lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_sample_location_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Sample Location Status — update_sample_location_status","text":"","code":"update_sample_location_status(con, sample_location_id, set_active = TRUE)"},{"path":"https://github.com/FlowWest/grunID/reference/update_sample_location_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Sample Location Status — update_sample_location_status","text":"con DBI connection object obtained DBI::dbConnect() sample_location_id numeric ID targeted sample location get_sample_locations set_active boolean, TRUE activating FALSE deactivating. record active, returned default get_sample_locations called. helps preserve look values valid historic contexts, longer valid current data records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_sample_location_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Sample Location Status — update_sample_location_status","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_sample_locations <- get_sample_locations(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_sample_locations) # to view the ID of the sample location needing status change #> Error in eval(expr, envir, enclos): object 'all_sample_locations' not found  #deactivate update_sample_location_status(con, 4, set_active=FALSE) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found #reactivate update_sample_location_status(con, 4) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_sample_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Sample Type — update_sample_type","title":"Update Sample Type — update_sample_type","text":"update_sample_type() updates existing sample type sample type lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_sample_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Sample Type — update_sample_type","text":"","code":"update_sample_type(con, sample_type_id, sample_type)"},{"path":"https://github.com/FlowWest/grunID/reference/update_sample_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Sample Type — update_sample_type","text":"con DBI connection object obtained DBI::dbConnect() sample_type_id numeric ID targeted sample type get_sample_types sample_type valid sample type dataframe containing following: code Short code representing sample type name sample_type_name Sample type full name description Brief description sample type","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_sample_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Sample Type — update_sample_type","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_sample_types <- get_sample_types(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_sample_types) # to view the ID of the sample type needing updates #> Error in eval(expr, envir, enclos): object 'all_sample_types' not found  updated_sample_type <- all_sample_types[1, 2:4] #> Error in eval(expr, envir, enclos): object 'all_sample_types' not found updated_sample_type$sample_type_name <- \"New Name Run\" #> Error: object 'updated_sample_type' not found update_sample_type(con, 1, updated_sample_type) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_sample_type_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Sample Type Status — update_sample_type_status","title":"Update Sample Type Status — update_sample_type_status","text":"update_sample_type_status() changes active flag existing sample type sample type lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_sample_type_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Sample Type Status — update_sample_type_status","text":"","code":"update_sample_type_status(con, sample_type_id, set_active = TRUE)"},{"path":"https://github.com/FlowWest/grunID/reference/update_sample_type_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Sample Type Status — update_sample_type_status","text":"con DBI connection object obtained DBI::dbConnect() sample_type_id numeric ID targeted sample type get_sample_types set_active boolean, TRUE activating FALSE deactivating. record active, returned default get_sample_types called. helps preserve look values valid historic contexts, longer valid current data records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_sample_type_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Sample Type Status — update_sample_type_status","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_sample_types <- get_sample_types(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_sample_types) # to view the ID of the sample type needing status change #> Error in eval(expr, envir, enclos): object 'all_sample_types' not found  #deactivate update_sample_type_status(con, 4, set_active=FALSE) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found #reactivate update_sample_type_status(con, 4) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_status_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Status Code — update_status_code","title":"Update Status Code — update_status_code","text":"update_status_code() updates existing status code status code lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_status_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Status Code — update_status_code","text":"","code":"update_status_code(con, status_code_id, status_code)"},{"path":"https://github.com/FlowWest/grunID/reference/update_status_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Status Code — update_status_code","text":"con DBI connection object obtained DBI::dbConnect() status_code_id numeric ID targeted status code get_status_codes status_code valid status code dataframe containing following: status_code Status code full name description Brief description status code","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_status_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Status Code — update_status_code","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_status_codes <- get_status_codes(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_status_codes) # to view the ID of the status code needing updates #> Error in eval(expr, envir, enclos): object 'all_status_codes' not found  updated_status_code <- all_status_codes[1, 2:3] #> Error in eval(expr, envir, enclos): object 'all_status_codes' not found updated_status_code$status_code <- \"New all done\" #> Error: object 'updated_status_code' not found update_status_code(con, 1, updated_status_code) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/update_status_code_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Status Code Status — update_status_code_status","title":"Update Status Code Status — update_status_code_status","text":"update_status_code_status() changes active flag existing status code status code lookup table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/update_status_code_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Status Code Status — update_status_code_status","text":"","code":"update_status_code_status(con, status_code_id, set_active = TRUE)"},{"path":"https://github.com/FlowWest/grunID/reference/update_status_code_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Status Code Status — update_status_code_status","text":"con DBI connection object obtained DBI::dbConnect() status_code_id numeric ID targeted status code get_status_codes set_active boolean, TRUE activating FALSE deactivating. record active, returned default get_status_codes called. helps preserve look values valid historic contexts, longer valid current data records.","code":""},{"path":[]},{"path":"https://github.com/FlowWest/grunID/reference/update_status_code_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Status Code Status — update_status_code_status","text":"","code":"# example database connection cfg <- config::get() con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = cfg$dbname,                       host = cfg$host,                       port = cfg$port,                       user = cfg$username,                       password = cfg$password) #> Error: connection to server at \"localhost\" (::1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections? #> connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused (0x0000274D/10061) #> \tIs the server running on that host and accepting TCP/IP connections?  all_status_codes <- get_status_codes(con) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found View(all_status_codes) # to view the ID of the status code needing status change #> Error in eval(expr, envir, enclos): object 'all_status_codes' not found  #deactivate update_status_code_status(con, 4, set_active=FALSE) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found #reactivate update_status_code_status(con, 4) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'dbObj' in selecting a method for function 'dbIsValid': object 'con' not found"},{"path":"https://github.com/FlowWest/grunID/reference/validate_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Results — validate_results","title":"Validate Results — validate_results","text":"Validate Results","code":""},{"path":"https://github.com/FlowWest/grunID/reference/validate_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Results — validate_results","text":"","code":"validate_results(   con,   plate_run,   results_table = c(\"assay_result\", \"external_assay_result\") )"},{"path":"https://github.com/FlowWest/grunID/reference/validate_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Results — validate_results","text":"con connection database plate_run_id plate run validation process","code":""},{"path":"https://github.com/FlowWest/grunID/reference/view_genetic_id_audits.html","id":null,"dir":"Reference","previous_headings":"","what":"View Results Table Audits — view_genetic_id_audits","title":"View Results Table Audits — view_genetic_id_audits","text":"Display table data changes made genetic_run_identification table","code":""},{"path":"https://github.com/FlowWest/grunID/reference/view_genetic_id_audits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View Results Table Audits — view_genetic_id_audits","text":"","code":"view_genetic_id_audits(con, ...)"},{"path":"https://github.com/FlowWest/grunID/news/index.html","id":"grunid-011","dir":"Changelog","previous_headings":"","what":"grunID 0.1.1","title":"grunID 0.1.1","text":"Added new function gr_db_connect handle Azure auth token creation. Users still need Azure CLI installed.","code":""}]
